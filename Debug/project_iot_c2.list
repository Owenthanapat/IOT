
project_iot_c2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a90  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08005c18  08005c18  00015c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c5c  08005c5c  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  08005c5c  08005c5c  00015c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c64  08005c64  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c64  08005c64  00015c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c68  08005c68  00015c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08005c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000238  08005ea4  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  08005ea4  00020698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a4b  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002864  00000000  00000000  00032cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec8  00000000  00000000  00035518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc0  00000000  00000000  000363e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021eb6  00000000  00000000  000371a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cbcf  00000000  00000000  00059056  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc802  00000000  00000000  00065c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00132427  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e50  00000000  00000000  001324a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000238 	.word	0x20000238
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005c00 	.word	0x08005c00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000023c 	.word	0x2000023c
 80001c4:	08005c00 	.word	0x08005c00

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f0:	4b0e      	ldr	r3, [pc, #56]	; (800052c <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0d      	ldr	r2, [pc, #52]	; (800052c <HAL_Init+0x40>)
 80004f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <HAL_Init+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <HAL_Init+0x40>)
 8000502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <HAL_Init+0x40>)
 800050e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 f92f 	bl	8000778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051a:	2000      	movs	r0, #0
 800051c:	f000 f808 	bl	8000530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000520:	f005 f95c 	bl	80057dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40023c00 	.word	0x40023c00

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x54>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_InitTick+0x58>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	fbb3 f3f1 	udiv	r3, r3, r1
 800054a:	fbb2 f3f3 	udiv	r3, r2, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f939 	bl	80007c6 <HAL_SYSTICK_Config>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	e00e      	b.n	800057c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b0f      	cmp	r3, #15
 8000562:	d80a      	bhi.n	800057a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000564:	2200      	movs	r2, #0
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	f04f 30ff 	mov.w	r0, #4294967295
 800056c:	f000 f90f 	bl	800078e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000570:	4a06      	ldr	r2, [pc, #24]	; (800058c <HAL_InitTick+0x5c>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	e000      	b.n	800057c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057a:	2301      	movs	r3, #1
}
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000234 	.word	0x20000234
 8000588:	20000004 	.word	0x20000004
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x20>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_IncTick+0x24>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4413      	add	r3, r2
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_IncTick+0x24>)
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000004 	.word	0x20000004
 80005b4:	200002a8 	.word	0x200002a8

080005b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return uwTick;
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <HAL_GetTick+0x14>)
 80005be:	681b      	ldr	r3, [r3, #0]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	200002a8 	.word	0x200002a8

080005d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d8:	f7ff ffee 	bl	80005b8 <HAL_GetTick>
 80005dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e8:	d005      	beq.n	80005f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <HAL_Delay+0x40>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4413      	add	r3, r2
 80005f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005f6:	bf00      	nop
 80005f8:	f7ff ffde 	bl	80005b8 <HAL_GetTick>
 80005fc:	4602      	mov	r2, r0
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	429a      	cmp	r2, r3
 8000606:	d8f7      	bhi.n	80005f8 <HAL_Delay+0x28>
  {
  }
}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000004 	.word	0x20000004

08000614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000630:	4013      	ands	r3, r2
 8000632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800063c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000646:	4a04      	ldr	r2, [pc, #16]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	60d3      	str	r3, [r2, #12]
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <__NVIC_GetPriorityGrouping+0x18>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	0a1b      	lsrs	r3, r3, #8
 8000666:	f003 0307 	and.w	r3, r3, #7
}
 800066a:	4618      	mov	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	6039      	str	r1, [r7, #0]
 8000682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	db0a      	blt.n	80006a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	b2da      	uxtb	r2, r3
 8000690:	490c      	ldr	r1, [pc, #48]	; (80006c4 <__NVIC_SetPriority+0x4c>)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	440b      	add	r3, r1
 800069c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a0:	e00a      	b.n	80006b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4908      	ldr	r1, [pc, #32]	; (80006c8 <__NVIC_SetPriority+0x50>)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	3b04      	subs	r3, #4
 80006b0:	0112      	lsls	r2, r2, #4
 80006b2:	b2d2      	uxtb	r2, r2
 80006b4:	440b      	add	r3, r1
 80006b6:	761a      	strb	r2, [r3, #24]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000e100 	.word	0xe000e100
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f003 0307 	and.w	r3, r3, #7
 80006de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	f1c3 0307 	rsb	r3, r3, #7
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	bf28      	it	cs
 80006ea:	2304      	movcs	r3, #4
 80006ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3304      	adds	r3, #4
 80006f2:	2b06      	cmp	r3, #6
 80006f4:	d902      	bls.n	80006fc <NVIC_EncodePriority+0x30>
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3b03      	subs	r3, #3
 80006fa:	e000      	b.n	80006fe <NVIC_EncodePriority+0x32>
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	f04f 32ff 	mov.w	r2, #4294967295
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	fa02 f303 	lsl.w	r3, r2, r3
 800070a:	43da      	mvns	r2, r3
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	401a      	ands	r2, r3
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000714:	f04f 31ff 	mov.w	r1, #4294967295
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	fa01 f303 	lsl.w	r3, r1, r3
 800071e:	43d9      	mvns	r1, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	4313      	orrs	r3, r2
         );
}
 8000726:	4618      	mov	r0, r3
 8000728:	3724      	adds	r7, #36	; 0x24
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
	...

08000734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3b01      	subs	r3, #1
 8000740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000744:	d301      	bcc.n	800074a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000746:	2301      	movs	r3, #1
 8000748:	e00f      	b.n	800076a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <SysTick_Config+0x40>)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000752:	210f      	movs	r1, #15
 8000754:	f04f 30ff 	mov.w	r0, #4294967295
 8000758:	f7ff ff8e 	bl	8000678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <SysTick_Config+0x40>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000762:	4b04      	ldr	r3, [pc, #16]	; (8000774 <SysTick_Config+0x40>)
 8000764:	2207      	movs	r2, #7
 8000766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	e000e010 	.word	0xe000e010

08000778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff ff47 	bl	8000614 <__NVIC_SetPriorityGrouping>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800078e:	b580      	push	{r7, lr}
 8000790:	b086      	sub	sp, #24
 8000792:	af00      	add	r7, sp, #0
 8000794:	4603      	mov	r3, r0
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
 800079a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007a0:	f7ff ff5c 	bl	800065c <__NVIC_GetPriorityGrouping>
 80007a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	68b9      	ldr	r1, [r7, #8]
 80007aa:	6978      	ldr	r0, [r7, #20]
 80007ac:	f7ff ff8e 	bl	80006cc <NVIC_EncodePriority>
 80007b0:	4602      	mov	r2, r0
 80007b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff5d 	bl	8000678 <__NVIC_SetPriority>
}
 80007be:	bf00      	nop
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ffb0 	bl	8000734 <SysTick_Config>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	d106      	bne.n	80007fc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80007fa:	e005      	b.n	8000808 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a04      	ldr	r2, [pc, #16]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000802:	f023 0304 	bic.w	r3, r3, #4
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000e010 	.word	0xe000e010

08000818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000818:	b480      	push	{r7}
 800081a:	b089      	sub	sp, #36	; 0x24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
 8000832:	e16b      	b.n	8000b0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000834:	2201      	movs	r2, #1
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	697a      	ldr	r2, [r7, #20]
 8000844:	4013      	ands	r3, r2
 8000846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	429a      	cmp	r2, r3
 800084e:	f040 815a 	bne.w	8000b06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d00b      	beq.n	8000872 <HAL_GPIO_Init+0x5a>
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2b02      	cmp	r3, #2
 8000860:	d007      	beq.n	8000872 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000866:	2b11      	cmp	r3, #17
 8000868:	d003      	beq.n	8000872 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	2b12      	cmp	r3, #18
 8000870:	d130      	bne.n	80008d4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	2203      	movs	r2, #3
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43db      	mvns	r3, r3
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	4013      	ands	r3, r2
 8000888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	68da      	ldr	r2, [r3, #12]
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	4313      	orrs	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008a8:	2201      	movs	r2, #1
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	43db      	mvns	r3, r3
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	4013      	ands	r3, r2
 80008b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	091b      	lsrs	r3, r3, #4
 80008be:	f003 0201 	and.w	r2, r3, #1
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	69ba      	ldr	r2, [r7, #24]
 80008d2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	2203      	movs	r2, #3
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	43db      	mvns	r3, r3
 80008e6:	69ba      	ldr	r2, [r7, #24]
 80008e8:	4013      	ands	r3, r2
 80008ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	689a      	ldr	r2, [r3, #8]
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d003      	beq.n	8000914 <HAL_GPIO_Init+0xfc>
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b12      	cmp	r3, #18
 8000912:	d123      	bne.n	800095c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	08da      	lsrs	r2, r3, #3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3208      	adds	r2, #8
 800091c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000920:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	f003 0307 	and.w	r3, r3, #7
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	220f      	movs	r2, #15
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	43db      	mvns	r3, r3
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	4013      	ands	r3, r2
 8000936:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	691a      	ldr	r2, [r3, #16]
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	4313      	orrs	r3, r2
 800094c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	08da      	lsrs	r2, r3, #3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3208      	adds	r2, #8
 8000956:	69b9      	ldr	r1, [r7, #24]
 8000958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	2203      	movs	r2, #3
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	4013      	ands	r3, r2
 8000972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f003 0203 	and.w	r2, r3, #3
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	4313      	orrs	r3, r2
 8000988:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000998:	2b00      	cmp	r3, #0
 800099a:	f000 80b4 	beq.w	8000b06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4b5f      	ldr	r3, [pc, #380]	; (8000b20 <HAL_GPIO_Init+0x308>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a5e      	ldr	r2, [pc, #376]	; (8000b20 <HAL_GPIO_Init+0x308>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b5c      	ldr	r3, [pc, #368]	; (8000b20 <HAL_GPIO_Init+0x308>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009ba:	4a5a      	ldr	r2, [pc, #360]	; (8000b24 <HAL_GPIO_Init+0x30c>)
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	089b      	lsrs	r3, r3, #2
 80009c0:	3302      	adds	r3, #2
 80009c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	f003 0303 	and.w	r3, r3, #3
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	220f      	movs	r2, #15
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	4013      	ands	r3, r2
 80009dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a51      	ldr	r2, [pc, #324]	; (8000b28 <HAL_GPIO_Init+0x310>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d02b      	beq.n	8000a3e <HAL_GPIO_Init+0x226>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a50      	ldr	r2, [pc, #320]	; (8000b2c <HAL_GPIO_Init+0x314>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d025      	beq.n	8000a3a <HAL_GPIO_Init+0x222>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a4f      	ldr	r2, [pc, #316]	; (8000b30 <HAL_GPIO_Init+0x318>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d01f      	beq.n	8000a36 <HAL_GPIO_Init+0x21e>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a4e      	ldr	r2, [pc, #312]	; (8000b34 <HAL_GPIO_Init+0x31c>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d019      	beq.n	8000a32 <HAL_GPIO_Init+0x21a>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a4d      	ldr	r2, [pc, #308]	; (8000b38 <HAL_GPIO_Init+0x320>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d013      	beq.n	8000a2e <HAL_GPIO_Init+0x216>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a4c      	ldr	r2, [pc, #304]	; (8000b3c <HAL_GPIO_Init+0x324>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d00d      	beq.n	8000a2a <HAL_GPIO_Init+0x212>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a4b      	ldr	r2, [pc, #300]	; (8000b40 <HAL_GPIO_Init+0x328>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d007      	beq.n	8000a26 <HAL_GPIO_Init+0x20e>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a4a      	ldr	r2, [pc, #296]	; (8000b44 <HAL_GPIO_Init+0x32c>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d101      	bne.n	8000a22 <HAL_GPIO_Init+0x20a>
 8000a1e:	2307      	movs	r3, #7
 8000a20:	e00e      	b.n	8000a40 <HAL_GPIO_Init+0x228>
 8000a22:	2308      	movs	r3, #8
 8000a24:	e00c      	b.n	8000a40 <HAL_GPIO_Init+0x228>
 8000a26:	2306      	movs	r3, #6
 8000a28:	e00a      	b.n	8000a40 <HAL_GPIO_Init+0x228>
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	e008      	b.n	8000a40 <HAL_GPIO_Init+0x228>
 8000a2e:	2304      	movs	r3, #4
 8000a30:	e006      	b.n	8000a40 <HAL_GPIO_Init+0x228>
 8000a32:	2303      	movs	r3, #3
 8000a34:	e004      	b.n	8000a40 <HAL_GPIO_Init+0x228>
 8000a36:	2302      	movs	r3, #2
 8000a38:	e002      	b.n	8000a40 <HAL_GPIO_Init+0x228>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e000      	b.n	8000a40 <HAL_GPIO_Init+0x228>
 8000a3e:	2300      	movs	r3, #0
 8000a40:	69fa      	ldr	r2, [r7, #28]
 8000a42:	f002 0203 	and.w	r2, r2, #3
 8000a46:	0092      	lsls	r2, r2, #2
 8000a48:	4093      	lsls	r3, r2
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a50:	4934      	ldr	r1, [pc, #208]	; (8000b24 <HAL_GPIO_Init+0x30c>)
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	089b      	lsrs	r3, r3, #2
 8000a56:	3302      	adds	r3, #2
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a5e:	4b3a      	ldr	r3, [pc, #232]	; (8000b48 <HAL_GPIO_Init+0x330>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	43db      	mvns	r3, r3
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d003      	beq.n	8000a82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a82:	4a31      	ldr	r2, [pc, #196]	; (8000b48 <HAL_GPIO_Init+0x330>)
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a88:	4b2f      	ldr	r3, [pc, #188]	; (8000b48 <HAL_GPIO_Init+0x330>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	43db      	mvns	r3, r3
 8000a92:	69ba      	ldr	r2, [r7, #24]
 8000a94:	4013      	ands	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aac:	4a26      	ldr	r2, [pc, #152]	; (8000b48 <HAL_GPIO_Init+0x330>)
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ab2:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <HAL_GPIO_Init+0x330>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	43db      	mvns	r3, r3
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ad6:	4a1c      	ldr	r2, [pc, #112]	; (8000b48 <HAL_GPIO_Init+0x330>)
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <HAL_GPIO_Init+0x330>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	69ba      	ldr	r2, [r7, #24]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000af8:	69ba      	ldr	r2, [r7, #24]
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b00:	4a11      	ldr	r2, [pc, #68]	; (8000b48 <HAL_GPIO_Init+0x330>)
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	61fb      	str	r3, [r7, #28]
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	2b0f      	cmp	r3, #15
 8000b10:	f67f ae90 	bls.w	8000834 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b14:	bf00      	nop
 8000b16:	3724      	adds	r7, #36	; 0x24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40013800 	.word	0x40013800
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	40020400 	.word	0x40020400
 8000b30:	40020800 	.word	0x40020800
 8000b34:	40020c00 	.word	0x40020c00
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40021400 	.word	0x40021400
 8000b40:	40021800 	.word	0x40021800
 8000b44:	40021c00 	.word	0x40021c00
 8000b48:	40013c00 	.word	0x40013c00

08000b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	691a      	ldr	r2, [r3, #16]
 8000b5c:	887b      	ldrh	r3, [r7, #2]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d002      	beq.n	8000b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b64:	2301      	movs	r3, #1
 8000b66:	73fb      	strb	r3, [r7, #15]
 8000b68:	e001      	b.n	8000b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f003 fbf6 	bl	8004384 <USB_GetMode>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	f040 80f1 	bne.w	8000d82 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f003 fbda 	bl	800435e <USB_ReadInterrupts>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f000 80e7 	beq.w	8000d80 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f003 fbd1 	bl	800435e <USB_ReadInterrupts>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000bc6:	d104      	bne.n	8000bd2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000bd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f003 fbc1 	bl	800435e <USB_ReadInterrupts>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000be6:	d104      	bne.n	8000bf2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bf0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 fbb1 	bl	800435e <USB_ReadInterrupts>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000c06:	d104      	bne.n	8000c12 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f003 fba1 	bl	800435e <USB_ReadInterrupts>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d103      	bne.n	8000c2e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f003 fb93 	bl	800435e <USB_ReadInterrupts>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c42:	d117      	bne.n	8000c74 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8000c52:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000c56:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f004 fee1 	bl	8005a20 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2101      	movs	r1, #1
 8000c64:	4618      	mov	r0, r3
 8000c66:	f003 fb9b 	bl	80043a0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000c72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f003 fb70 	bl	800435e <USB_ReadInterrupts>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c88:	d102      	bne.n	8000c90 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f001 f874 	bl	8001d78 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f003 fb62 	bl	800435e <USB_ReadInterrupts>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	f003 0308 	and.w	r3, r3, #8
 8000ca0:	2b08      	cmp	r3, #8
 8000ca2:	d106      	bne.n	8000cb2 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f004 fe9f 	bl	80059e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2208      	movs	r2, #8
 8000cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f003 fb51 	bl	800435e <USB_ReadInterrupts>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000cc6:	d138      	bne.n	8000d3a <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f003 fbda 	bl	8004486 <USB_HC_ReadInterrupt>
 8000cd2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e025      	b.n	8000d26 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	f003 030f 	and.w	r3, r3, #15
 8000ce0:	68ba      	ldr	r2, [r7, #8]
 8000ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d018      	beq.n	8000d20 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	015a      	lsls	r2, r3, #5
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d04:	d106      	bne.n	8000d14 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f000 f87b 	bl	8000e08 <HCD_HC_IN_IRQHandler>
 8000d12:	e005      	b.n	8000d20 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	4619      	mov	r1, r3
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f000 fc0b 	bl	8001536 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3301      	adds	r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d3d4      	bcc.n	8000cda <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f003 fb0d 	bl	800435e <USB_ReadInterrupts>
 8000d44:	4603      	mov	r3, r0
 8000d46:	f003 0310 	and.w	r3, r3, #16
 8000d4a:	2b10      	cmp	r3, #16
 8000d4c:	d101      	bne.n	8000d52 <HAL_HCD_IRQHandler+0x1d6>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e000      	b.n	8000d54 <HAL_HCD_IRQHandler+0x1d8>
 8000d52:	2300      	movs	r3, #0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d014      	beq.n	8000d82 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	699a      	ldr	r2, [r3, #24]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 0210 	bic.w	r2, r2, #16
 8000d66:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f000 ff59 	bl	8001c20 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	699a      	ldr	r2, [r3, #24]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f042 0210 	orr.w	r2, r2, #16
 8000d7c:	619a      	str	r2, [r3, #24]
 8000d7e:	e000      	b.n	8000d82 <HAL_HCD_IRQHandler+0x206>
      return;
 8000d80:	bf00      	nop
    }
  }
}
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d101      	bne.n	8000d9e <HAL_HCD_Start+0x16>
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	e013      	b.n	8000dc6 <HAL_HCD_Start+0x3e>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2201      	movs	r2, #1
 8000da2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f003 fa44 	bl	8004238 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2101      	movs	r1, #1
 8000db6:	4618      	mov	r0, r3
 8000db8:	f003 fb2c 	bl	8004414 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d101      	bne.n	8000de4 <HAL_HCD_Stop+0x16>
 8000de0:	2302      	movs	r3, #2
 8000de2:	e00d      	b.n	8000e00 <HAL_HCD_Stop+0x32>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2201      	movs	r2, #1
 8000de8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f003 fc58 	bl	80046a6 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8000e1e:	78fb      	ldrb	r3, [r7, #3]
 8000e20:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	015a      	lsls	r2, r3, #5
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4413      	add	r3, r2
 8000e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d119      	bne.n	8000e6c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	015a      	lsls	r2, r3, #5
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4413      	add	r3, r2
 8000e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e44:	461a      	mov	r2, r3
 8000e46:	2304      	movs	r3, #4
 8000e48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	015a      	lsls	r2, r3, #5
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	4413      	add	r3, r2
 8000e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	68fa      	ldr	r2, [r7, #12]
 8000e5a:	0151      	lsls	r1, r2, #5
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	440a      	add	r2, r1
 8000e60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	60d3      	str	r3, [r2, #12]
 8000e6a:	e095      	b.n	8000f98 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	015a      	lsls	r2, r3, #5
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4413      	add	r3, r2
 8000e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f003 0320 	and.w	r3, r3, #32
 8000e7e:	2b20      	cmp	r3, #32
 8000e80:	d109      	bne.n	8000e96 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	015a      	lsls	r2, r3, #5
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	4413      	add	r3, r2
 8000e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2320      	movs	r3, #32
 8000e92:	6093      	str	r3, [r2, #8]
 8000e94:	e080      	b.n	8000f98 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	015a      	lsls	r2, r3, #5
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	2b08      	cmp	r3, #8
 8000eaa:	d134      	bne.n	8000f16 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	015a      	lsls	r2, r3, #5
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	0151      	lsls	r1, r2, #5
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	440a      	add	r2, r1
 8000ec2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	440b      	add	r3, r1
 8000eda:	335d      	adds	r3, #93	; 0x5d
 8000edc:	2205      	movs	r2, #5
 8000ede:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	015a      	lsls	r2, r3, #5
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000eec:	461a      	mov	r2, r3
 8000eee:	2310      	movs	r3, #16
 8000ef0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	015a      	lsls	r2, r3, #5
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4413      	add	r3, r2
 8000efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000efe:	461a      	mov	r2, r3
 8000f00:	2308      	movs	r3, #8
 8000f02:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 faca 	bl	80044a8 <USB_HC_Halt>
 8000f14:	e040      	b.n	8000f98 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	015a      	lsls	r2, r3, #5
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f2c:	d134      	bne.n	8000f98 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	015a      	lsls	r2, r3, #5
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4413      	add	r3, r2
 8000f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	0151      	lsls	r1, r2, #5
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	440a      	add	r2, r1
 8000f44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f003 faa5 	bl	80044a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	015a      	lsls	r2, r3, #5
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4413      	add	r3, r2
 8000f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	440b      	add	r3, r1
 8000f7e:	335d      	adds	r3, #93	; 0x5d
 8000f80:	2208      	movs	r2, #8
 8000f82:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	015a      	lsls	r2, r3, #5
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f90:	461a      	mov	r2, r3
 8000f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f96:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	015a      	lsls	r2, r3, #5
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fae:	d122      	bne.n	8000ff6 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	015a      	lsls	r2, r3, #5
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	0151      	lsls	r1, r2, #5
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	440a      	add	r2, r1
 8000fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000fca:	f043 0302 	orr.w	r3, r3, #2
 8000fce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f003 fa64 	bl	80044a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	015a      	lsls	r2, r3, #5
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fec:	461a      	mov	r2, r3
 8000fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ff2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8000ff4:	e29b      	b.n	800152e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	015a      	lsls	r2, r3, #5
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b01      	cmp	r3, #1
 800100a:	f040 80c1 	bne.w	8001190 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d01b      	beq.n	800104e <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	440b      	add	r3, r1
 8001024:	3348      	adds	r3, #72	; 0x48
 8001026:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	0159      	lsls	r1, r3, #5
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	440b      	add	r3, r1
 8001030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800103a:	1ad1      	subs	r1, r2, r3
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	4613      	mov	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4403      	add	r3, r0
 800104a:	334c      	adds	r3, #76	; 0x4c
 800104c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	440b      	add	r3, r1
 800105c:	335d      	adds	r3, #93	; 0x5d
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	440b      	add	r3, r1
 8001070:	3358      	adds	r3, #88	; 0x58
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	015a      	lsls	r2, r3, #5
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4413      	add	r3, r2
 800107e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001082:	461a      	mov	r2, r3
 8001084:	2301      	movs	r3, #1
 8001086:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	440b      	add	r3, r1
 8001096:	333f      	adds	r3, #63	; 0x3f
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00a      	beq.n	80010b4 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	440b      	add	r3, r1
 80010ac:	333f      	adds	r3, #63	; 0x3f
 80010ae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d121      	bne.n	80010f8 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	015a      	lsls	r2, r3, #5
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4413      	add	r3, r2
 80010bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	0151      	lsls	r1, r2, #5
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	440a      	add	r2, r1
 80010ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80010ce:	f043 0302 	orr.w	r3, r3, #2
 80010d2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	4611      	mov	r1, r2
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 f9e2 	bl	80044a8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	015a      	lsls	r2, r3, #5
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4413      	add	r3, r2
 80010ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010f0:	461a      	mov	r2, r3
 80010f2:	2310      	movs	r3, #16
 80010f4:	6093      	str	r3, [r2, #8]
 80010f6:	e034      	b.n	8001162 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	440b      	add	r3, r1
 8001106:	333f      	adds	r3, #63	; 0x3f
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b03      	cmp	r3, #3
 800110c:	d129      	bne.n	8001162 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	015a      	lsls	r2, r3, #5
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4413      	add	r3, r2
 8001116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	0151      	lsls	r1, r2, #5
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	440a      	add	r2, r1
 8001124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001128:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800112c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	440b      	add	r3, r1
 800113c:	335c      	adds	r3, #92	; 0x5c
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	b2d8      	uxtb	r0, r3
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	4613      	mov	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	440b      	add	r3, r1
 8001154:	335c      	adds	r3, #92	; 0x5c
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4601      	mov	r1, r0
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f004 fc6d 	bl	8005a3c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	440b      	add	r3, r1
 8001170:	3350      	adds	r3, #80	; 0x50
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	f083 0301 	eor.w	r3, r3, #1
 8001178:	b2d8      	uxtb	r0, r3
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	440b      	add	r3, r1
 8001188:	3350      	adds	r3, #80	; 0x50
 800118a:	4602      	mov	r2, r0
 800118c:	701a      	strb	r2, [r3, #0]
}
 800118e:	e1ce      	b.n	800152e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	015a      	lsls	r2, r3, #5
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4413      	add	r3, r2
 8001198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	f040 80f1 	bne.w	800138a <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	015a      	lsls	r2, r3, #5
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4413      	add	r3, r2
 80011b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	0151      	lsls	r1, r2, #5
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	440a      	add	r2, r1
 80011be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80011c2:	f023 0302 	bic.w	r3, r3, #2
 80011c6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	440b      	add	r3, r1
 80011d6:	335d      	adds	r3, #93	; 0x5d
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d10a      	bne.n	80011f4 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	440b      	add	r3, r1
 80011ec:	335c      	adds	r3, #92	; 0x5c
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
 80011f2:	e0b0      	b.n	8001356 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	4613      	mov	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	440b      	add	r3, r1
 8001202:	335d      	adds	r3, #93	; 0x5d
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b05      	cmp	r3, #5
 8001208:	d10a      	bne.n	8001220 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	440b      	add	r3, r1
 8001218:	335c      	adds	r3, #92	; 0x5c
 800121a:	2205      	movs	r2, #5
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	e09a      	b.n	8001356 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001220:	6879      	ldr	r1, [r7, #4]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	440b      	add	r3, r1
 800122e:	335d      	adds	r3, #93	; 0x5d
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b06      	cmp	r3, #6
 8001234:	d00a      	beq.n	800124c <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	440b      	add	r3, r1
 8001244:	335d      	adds	r3, #93	; 0x5d
 8001246:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001248:	2b08      	cmp	r3, #8
 800124a:	d156      	bne.n	80012fa <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	440b      	add	r3, r1
 800125a:	3358      	adds	r3, #88	; 0x58
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	1c59      	adds	r1, r3, #1
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	4403      	add	r3, r0
 800126e:	3358      	adds	r3, #88	; 0x58
 8001270:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	440b      	add	r3, r1
 8001280:	3358      	adds	r3, #88	; 0x58
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b03      	cmp	r3, #3
 8001286:	d914      	bls.n	80012b2 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	4613      	mov	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	440b      	add	r3, r1
 8001296:	3358      	adds	r3, #88	; 0x58
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	440b      	add	r3, r1
 80012aa:	335c      	adds	r3, #92	; 0x5c
 80012ac:	2204      	movs	r2, #4
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	e009      	b.n	80012c6 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	440b      	add	r3, r1
 80012c0:	335c      	adds	r3, #92	; 0x5c
 80012c2:	2202      	movs	r2, #2
 80012c4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	015a      	lsls	r2, r3, #5
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4413      	add	r3, r2
 80012ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80012dc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012e4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	015a      	lsls	r2, r3, #5
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4413      	add	r3, r2
 80012ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012f2:	461a      	mov	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	e02d      	b.n	8001356 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	440b      	add	r3, r1
 8001308:	335d      	adds	r3, #93	; 0x5d
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b03      	cmp	r3, #3
 800130e:	d122      	bne.n	8001356 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	440b      	add	r3, r1
 800131e:	335c      	adds	r3, #92	; 0x5c
 8001320:	2202      	movs	r2, #2
 8001322:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	015a      	lsls	r2, r3, #5
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4413      	add	r3, r2
 800132c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800133a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001342:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	015a      	lsls	r2, r3, #5
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4413      	add	r3, r2
 800134c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001350:	461a      	mov	r2, r3
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	015a      	lsls	r2, r3, #5
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4413      	add	r3, r2
 800135e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001362:	461a      	mov	r2, r3
 8001364:	2302      	movs	r3, #2
 8001366:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	b2d8      	uxtb	r0, r3
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	440b      	add	r3, r1
 800137a:	335c      	adds	r3, #92	; 0x5c
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4601      	mov	r1, r0
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f004 fb5a 	bl	8005a3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001388:	e0d1      	b.n	800152e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	015a      	lsls	r2, r3, #5
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4413      	add	r3, r2
 8001392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139c:	2b80      	cmp	r3, #128	; 0x80
 800139e:	d13e      	bne.n	800141e <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	015a      	lsls	r2, r3, #5
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4413      	add	r3, r2
 80013a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	0151      	lsls	r1, r2, #5
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	440a      	add	r2, r1
 80013b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	440b      	add	r3, r1
 80013ce:	3358      	adds	r3, #88	; 0x58
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	1c59      	adds	r1, r3, #1
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4403      	add	r3, r0
 80013e2:	3358      	adds	r3, #88	; 0x58
 80013e4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	440b      	add	r3, r1
 80013f4:	335d      	adds	r3, #93	; 0x5d
 80013f6:	2206      	movs	r2, #6
 80013f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f003 f84f 	bl	80044a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	015a      	lsls	r2, r3, #5
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4413      	add	r3, r2
 8001412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001416:	461a      	mov	r2, r3
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	6093      	str	r3, [r2, #8]
}
 800141c:	e087      	b.n	800152e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	015a      	lsls	r2, r3, #5
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4413      	add	r3, r2
 8001426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	2b10      	cmp	r3, #16
 8001432:	d17c      	bne.n	800152e <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	333f      	adds	r3, #63	; 0x3f
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b03      	cmp	r3, #3
 8001448:	d122      	bne.n	8001490 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	440b      	add	r3, r1
 8001458:	3358      	adds	r3, #88	; 0x58
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	015a      	lsls	r2, r3, #5
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4413      	add	r3, r2
 8001466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	0151      	lsls	r1, r2, #5
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	440a      	add	r2, r1
 8001474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f003 f80d 	bl	80044a8 <USB_HC_Halt>
 800148e:	e045      	b.n	800151c <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	440b      	add	r3, r1
 800149e:	333f      	adds	r3, #63	; 0x3f
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00a      	beq.n	80014bc <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	440b      	add	r3, r1
 80014b4:	333f      	adds	r3, #63	; 0x3f
 80014b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d12f      	bne.n	800151c <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	440b      	add	r3, r1
 80014ca:	3358      	adds	r3, #88	; 0x58
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d121      	bne.n	800151c <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	440b      	add	r3, r1
 80014e6:	335d      	adds	r3, #93	; 0x5d
 80014e8:	2203      	movs	r2, #3
 80014ea:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	015a      	lsls	r2, r3, #5
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4413      	add	r3, r2
 80014f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	0151      	lsls	r1, r2, #5
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	440a      	add	r2, r1
 8001502:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001506:	f043 0302 	orr.w	r3, r3, #2
 800150a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f002 ffc6 	bl	80044a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	015a      	lsls	r2, r3, #5
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4413      	add	r3, r2
 8001524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001528:	461a      	mov	r2, r3
 800152a:	2310      	movs	r3, #16
 800152c:	6093      	str	r3, [r2, #8]
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	460b      	mov	r3, r1
 8001540:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800154c:	78fb      	ldrb	r3, [r7, #3]
 800154e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	015a      	lsls	r2, r3, #5
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4413      	add	r3, r2
 8001558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b04      	cmp	r3, #4
 8001564:	d119      	bne.n	800159a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	015a      	lsls	r2, r3, #5
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4413      	add	r3, r2
 800156e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001572:	461a      	mov	r2, r3
 8001574:	2304      	movs	r3, #4
 8001576:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	015a      	lsls	r2, r3, #5
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4413      	add	r3, r2
 8001580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	0151      	lsls	r1, r2, #5
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	440a      	add	r2, r1
 800158e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001592:	f043 0302 	orr.w	r3, r3, #2
 8001596:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001598:	e33e      	b.n	8001c18 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	015a      	lsls	r2, r3, #5
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4413      	add	r3, r2
 80015a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 0320 	and.w	r3, r3, #32
 80015ac:	2b20      	cmp	r3, #32
 80015ae:	d141      	bne.n	8001634 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	015a      	lsls	r2, r3, #5
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4413      	add	r3, r2
 80015b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015bc:	461a      	mov	r2, r3
 80015be:	2320      	movs	r3, #32
 80015c0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	440b      	add	r3, r1
 80015d0:	333d      	adds	r3, #61	; 0x3d
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	f040 831f 	bne.w	8001c18 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
 80015e8:	333d      	adds	r3, #61	; 0x3d
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	440b      	add	r3, r1
 80015fc:	335c      	adds	r3, #92	; 0x5c
 80015fe:	2202      	movs	r2, #2
 8001600:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	015a      	lsls	r2, r3, #5
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4413      	add	r3, r2
 800160a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	0151      	lsls	r1, r2, #5
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	440a      	add	r2, r1
 8001618:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f002 ff3b 	bl	80044a8 <USB_HC_Halt>
}
 8001632:	e2f1      	b.n	8001c18 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	015a      	lsls	r2, r3, #5
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4413      	add	r3, r2
 800163c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001646:	2b40      	cmp	r3, #64	; 0x40
 8001648:	d13f      	bne.n	80016ca <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	440b      	add	r3, r1
 8001658:	335d      	adds	r3, #93	; 0x5d
 800165a:	2204      	movs	r2, #4
 800165c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	440b      	add	r3, r1
 800166c:	333d      	adds	r3, #61	; 0x3d
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	440b      	add	r3, r1
 8001680:	3358      	adds	r3, #88	; 0x58
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	015a      	lsls	r2, r3, #5
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4413      	add	r3, r2
 800168e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	0151      	lsls	r1, r2, #5
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	440a      	add	r2, r1
 800169c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 fef9 	bl	80044a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	015a      	lsls	r2, r3, #5
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4413      	add	r3, r2
 80016be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016c2:	461a      	mov	r2, r3
 80016c4:	2340      	movs	r3, #64	; 0x40
 80016c6:	6093      	str	r3, [r2, #8]
}
 80016c8:	e2a6      	b.n	8001c18 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	015a      	lsls	r2, r3, #5
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4413      	add	r3, r2
 80016d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016e0:	d122      	bne.n	8001728 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	015a      	lsls	r2, r3, #5
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4413      	add	r3, r2
 80016ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	0151      	lsls	r1, r2, #5
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	440a      	add	r2, r1
 80016f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f002 fecb 	bl	80044a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	015a      	lsls	r2, r3, #5
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4413      	add	r3, r2
 800171a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800171e:	461a      	mov	r2, r3
 8001720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001724:	6093      	str	r3, [r2, #8]
}
 8001726:	e277      	b.n	8001c18 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	015a      	lsls	r2, r3, #5
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4413      	add	r3, r2
 8001730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b01      	cmp	r3, #1
 800173c:	d135      	bne.n	80017aa <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	3358      	adds	r3, #88	; 0x58
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	015a      	lsls	r2, r3, #5
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4413      	add	r3, r2
 800175a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	0151      	lsls	r1, r2, #5
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	440a      	add	r2, r1
 8001768:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f002 fe93 	bl	80044a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	015a      	lsls	r2, r3, #5
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4413      	add	r3, r2
 800178a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800178e:	461a      	mov	r2, r3
 8001790:	2301      	movs	r3, #1
 8001792:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	440b      	add	r3, r1
 80017a2:	335d      	adds	r3, #93	; 0x5d
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]
}
 80017a8:	e236      	b.n	8001c18 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	015a      	lsls	r2, r3, #5
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4413      	add	r3, r2
 80017b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d12b      	bne.n	8001818 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	015a      	lsls	r2, r3, #5
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4413      	add	r3, r2
 80017c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017cc:	461a      	mov	r2, r3
 80017ce:	2308      	movs	r3, #8
 80017d0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	015a      	lsls	r2, r3, #5
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4413      	add	r3, r2
 80017da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	0151      	lsls	r1, r2, #5
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	440a      	add	r2, r1
 80017e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f002 fe53 	bl	80044a8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	440b      	add	r3, r1
 8001810:	335d      	adds	r3, #93	; 0x5d
 8001812:	2205      	movs	r2, #5
 8001814:	701a      	strb	r2, [r3, #0]
}
 8001816:	e1ff      	b.n	8001c18 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	015a      	lsls	r2, r3, #5
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4413      	add	r3, r2
 8001820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	2b10      	cmp	r3, #16
 800182c:	d155      	bne.n	80018da <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	440b      	add	r3, r1
 800183c:	3358      	adds	r3, #88	; 0x58
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	440b      	add	r3, r1
 8001850:	335d      	adds	r3, #93	; 0x5d
 8001852:	2203      	movs	r2, #3
 8001854:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	440b      	add	r3, r1
 8001864:	333d      	adds	r3, #61	; 0x3d
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d114      	bne.n	8001896 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	440b      	add	r3, r1
 800187a:	333c      	adds	r3, #60	; 0x3c
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d109      	bne.n	8001896 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	440b      	add	r3, r1
 8001890:	333d      	adds	r3, #61	; 0x3d
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	015a      	lsls	r2, r3, #5
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4413      	add	r3, r2
 800189e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	0151      	lsls	r1, r2, #5
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	440a      	add	r2, r1
 80018ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f002 fdf1 	bl	80044a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	015a      	lsls	r2, r3, #5
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4413      	add	r3, r2
 80018ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d2:	461a      	mov	r2, r3
 80018d4:	2310      	movs	r3, #16
 80018d6:	6093      	str	r3, [r2, #8]
}
 80018d8:	e19e      	b.n	8001c18 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	015a      	lsls	r2, r3, #5
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ec:	2b80      	cmp	r3, #128	; 0x80
 80018ee:	d12b      	bne.n	8001948 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	015a      	lsls	r2, r3, #5
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4413      	add	r3, r2
 80018f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	0151      	lsls	r1, r2, #5
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	440a      	add	r2, r1
 8001906:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800190a:	f043 0302 	orr.w	r3, r3, #2
 800190e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	4611      	mov	r1, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f002 fdc4 	bl	80044a8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	440b      	add	r3, r1
 800192e:	335d      	adds	r3, #93	; 0x5d
 8001930:	2206      	movs	r2, #6
 8001932:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	015a      	lsls	r2, r3, #5
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4413      	add	r3, r2
 800193c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001940:	461a      	mov	r2, r3
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	6093      	str	r3, [r2, #8]
}
 8001946:	e167      	b.n	8001c18 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	015a      	lsls	r2, r3, #5
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4413      	add	r3, r2
 8001950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800195e:	d135      	bne.n	80019cc <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	015a      	lsls	r2, r3, #5
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4413      	add	r3, r2
 8001968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	0151      	lsls	r1, r2, #5
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	440a      	add	r2, r1
 8001976:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800197a:	f043 0302 	orr.w	r3, r3, #2
 800197e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f002 fd8c 	bl	80044a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	015a      	lsls	r2, r3, #5
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4413      	add	r3, r2
 8001998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800199c:	461a      	mov	r2, r3
 800199e:	2310      	movs	r3, #16
 80019a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	015a      	lsls	r2, r3, #5
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ae:	461a      	mov	r2, r3
 80019b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	440b      	add	r3, r1
 80019c4:	335d      	adds	r3, #93	; 0x5d
 80019c6:	2208      	movs	r2, #8
 80019c8:	701a      	strb	r2, [r3, #0]
}
 80019ca:	e125      	b.n	8001c18 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	015a      	lsls	r2, r3, #5
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4413      	add	r3, r2
 80019d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b02      	cmp	r3, #2
 80019e0:	f040 811a 	bne.w	8001c18 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	015a      	lsls	r2, r3, #5
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4413      	add	r3, r2
 80019ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	0151      	lsls	r1, r2, #5
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	440a      	add	r2, r1
 80019fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019fe:	f023 0302 	bic.w	r3, r3, #2
 8001a02:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	440b      	add	r3, r1
 8001a12:	335d      	adds	r3, #93	; 0x5d
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d137      	bne.n	8001a8a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	440b      	add	r3, r1
 8001a28:	335c      	adds	r3, #92	; 0x5c
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	440b      	add	r3, r1
 8001a3c:	333f      	adds	r3, #63	; 0x3f
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d00b      	beq.n	8001a5c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	440b      	add	r3, r1
 8001a52:	333f      	adds	r3, #63	; 0x3f
 8001a54:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	f040 80c5 	bne.w	8001be6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	440b      	add	r3, r1
 8001a6a:	3351      	adds	r3, #81	; 0x51
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	f083 0301 	eor.w	r3, r3, #1
 8001a72:	b2d8      	uxtb	r0, r3
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	440b      	add	r3, r1
 8001a82:	3351      	adds	r3, #81	; 0x51
 8001a84:	4602      	mov	r2, r0
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	e0ad      	b.n	8001be6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	440b      	add	r3, r1
 8001a98:	335d      	adds	r3, #93	; 0x5d
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d10a      	bne.n	8001ab6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	440b      	add	r3, r1
 8001aae:	335c      	adds	r3, #92	; 0x5c
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	701a      	strb	r2, [r3, #0]
 8001ab4:	e097      	b.n	8001be6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	440b      	add	r3, r1
 8001ac4:	335d      	adds	r3, #93	; 0x5d
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d10a      	bne.n	8001ae2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	440b      	add	r3, r1
 8001ada:	335c      	adds	r3, #92	; 0x5c
 8001adc:	2202      	movs	r2, #2
 8001ade:	701a      	strb	r2, [r3, #0]
 8001ae0:	e081      	b.n	8001be6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	440b      	add	r3, r1
 8001af0:	335d      	adds	r3, #93	; 0x5d
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b05      	cmp	r3, #5
 8001af6:	d10a      	bne.n	8001b0e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	335c      	adds	r3, #92	; 0x5c
 8001b08:	2205      	movs	r2, #5
 8001b0a:	701a      	strb	r2, [r3, #0]
 8001b0c:	e06b      	b.n	8001be6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	440b      	add	r3, r1
 8001b1c:	335d      	adds	r3, #93	; 0x5d
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b06      	cmp	r3, #6
 8001b22:	d00a      	beq.n	8001b3a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	440b      	add	r3, r1
 8001b32:	335d      	adds	r3, #93	; 0x5d
 8001b34:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d155      	bne.n	8001be6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	3358      	adds	r3, #88	; 0x58
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	1c59      	adds	r1, r3, #1
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4403      	add	r3, r0
 8001b5c:	3358      	adds	r3, #88	; 0x58
 8001b5e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	440b      	add	r3, r1
 8001b6e:	3358      	adds	r3, #88	; 0x58
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d914      	bls.n	8001ba0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	440b      	add	r3, r1
 8001b84:	3358      	adds	r3, #88	; 0x58
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	440b      	add	r3, r1
 8001b98:	335c      	adds	r3, #92	; 0x5c
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	e009      	b.n	8001bb4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	335c      	adds	r3, #92	; 0x5c
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	015a      	lsls	r2, r3, #5
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001bca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bd2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be0:	461a      	mov	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	015a      	lsls	r2, r3, #5
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4413      	add	r3, r2
 8001bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	b2d8      	uxtb	r0, r3
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	440b      	add	r3, r1
 8001c0a:	335c      	adds	r3, #92	; 0x5c
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4601      	mov	r1, r0
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f003 ff12 	bl	8005a3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001c18:	bf00      	nop
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	0c5b      	lsrs	r3, r3, #17
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	091b      	lsrs	r3, r3, #4
 8001c50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c54:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d003      	beq.n	8001c64 <HCD_RXQLVL_IRQHandler+0x44>
 8001c5c:	2b05      	cmp	r3, #5
 8001c5e:	f000 8082 	beq.w	8001d66 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001c62:	e083      	b.n	8001d6c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d07f      	beq.n	8001d6a <HCD_RXQLVL_IRQHandler+0x14a>
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	440b      	add	r3, r1
 8001c78:	3344      	adds	r3, #68	; 0x44
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d074      	beq.n	8001d6a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	3344      	adds	r3, #68	; 0x44
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	b292      	uxth	r2, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f002 fb36 	bl	800430c <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	440b      	add	r3, r1
 8001cae:	3344      	adds	r3, #68	; 0x44
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	18d1      	adds	r1, r2, r3
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4403      	add	r3, r0
 8001cc4:	3344      	adds	r3, #68	; 0x44
 8001cc6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	440b      	add	r3, r1
 8001cd6:	334c      	adds	r3, #76	; 0x4c
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	18d1      	adds	r1, r2, r3
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4403      	add	r3, r0
 8001cec:	334c      	adds	r3, #76	; 0x4c
 8001cee:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	015a      	lsls	r2, r3, #5
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HCD_RXQLVL_IRQHandler+0x154>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d031      	beq.n	8001d6a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d1c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d24:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	015a      	lsls	r2, r3, #5
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d32:	461a      	mov	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	440b      	add	r3, r1
 8001d46:	3350      	adds	r3, #80	; 0x50
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	f083 0301 	eor.w	r3, r3, #1
 8001d4e:	b2d8      	uxtb	r0, r3
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3350      	adds	r3, #80	; 0x50
 8001d60:	4602      	mov	r2, r0
 8001d62:	701a      	strb	r2, [r3, #0]
      break;
 8001d64:	e001      	b.n	8001d6a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8001d66:	bf00      	nop
 8001d68:	e000      	b.n	8001d6c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8001d6a:	bf00      	nop
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	3728      	adds	r7, #40	; 0x28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	1ff80000 	.word	0x1ff80000

08001d78 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001da4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d113      	bne.n	8001dd8 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d10a      	bne.n	8001dd0 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699a      	ldr	r2, [r3, #24]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001dc8:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f003 fe1a 	bl	8005a04 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f043 0302 	orr.w	r3, r3, #2
 8001dd6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d147      	bne.n	8001e72 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f043 0308 	orr.w	r3, r3, #8
 8001de8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d129      	bne.n	8001e48 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d113      	bne.n	8001e24 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001e02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e06:	d106      	bne.n	8001e16 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2102      	movs	r1, #2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f002 fac6 	bl	80043a0 <USB_InitFSLSPClkSel>
 8001e14:	e011      	b.n	8001e3a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f002 fabf 	bl	80043a0 <USB_InitFSLSPClkSel>
 8001e22:	e00a      	b.n	8001e3a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d106      	bne.n	8001e3a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e32:	461a      	mov	r2, r3
 8001e34:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001e38:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f003 fe0c 	bl	8005a58 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f003 fddf 	bl	8005a04 <HAL_HCD_Connect_Callback>
 8001e46:	e014      	b.n	8001e72 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f003 fe13 	bl	8005a74 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001e5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001e60:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001e70:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f003 0320 	and.w	r3, r3, #32
 8001e78:	2b20      	cmp	r3, #32
 8001e7a:	d103      	bne.n	8001e84 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f043 0320 	orr.w	r3, r3, #32
 8001e82:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e11f      	b.n	80020ea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f003 fcb4 	bl	800582c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2224      	movs	r2, #36	; 0x24
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001efa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001efc:	f001 fcc8 	bl	8003890 <HAL_RCC_GetPCLK1Freq>
 8001f00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4a7b      	ldr	r2, [pc, #492]	; (80020f4 <HAL_I2C_Init+0x25c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d807      	bhi.n	8001f1c <HAL_I2C_Init+0x84>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4a7a      	ldr	r2, [pc, #488]	; (80020f8 <HAL_I2C_Init+0x260>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	bf94      	ite	ls
 8001f14:	2301      	movls	r3, #1
 8001f16:	2300      	movhi	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	e006      	b.n	8001f2a <HAL_I2C_Init+0x92>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4a77      	ldr	r2, [pc, #476]	; (80020fc <HAL_I2C_Init+0x264>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	bf94      	ite	ls
 8001f24:	2301      	movls	r3, #1
 8001f26:	2300      	movhi	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0db      	b.n	80020ea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4a72      	ldr	r2, [pc, #456]	; (8002100 <HAL_I2C_Init+0x268>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	0c9b      	lsrs	r3, r3, #18
 8001f3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a64      	ldr	r2, [pc, #400]	; (80020f4 <HAL_I2C_Init+0x25c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d802      	bhi.n	8001f6c <HAL_I2C_Init+0xd4>
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	e009      	b.n	8001f80 <HAL_I2C_Init+0xe8>
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	4a63      	ldr	r2, [pc, #396]	; (8002104 <HAL_I2C_Init+0x26c>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	099b      	lsrs	r3, r3, #6
 8001f7e:	3301      	adds	r3, #1
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	430b      	orrs	r3, r1
 8001f86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4956      	ldr	r1, [pc, #344]	; (80020f4 <HAL_I2C_Init+0x25c>)
 8001f9c:	428b      	cmp	r3, r1
 8001f9e:	d80d      	bhi.n	8001fbc <HAL_I2C_Init+0x124>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1e59      	subs	r1, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	bf38      	it	cc
 8001fb8:	2304      	movcc	r3, #4
 8001fba:	e04f      	b.n	800205c <HAL_I2C_Init+0x1c4>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d111      	bne.n	8001fe8 <HAL_I2C_Init+0x150>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1e58      	subs	r0, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6859      	ldr	r1, [r3, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	440b      	add	r3, r1
 8001fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bf0c      	ite	eq
 8001fe0:	2301      	moveq	r3, #1
 8001fe2:	2300      	movne	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	e012      	b.n	800200e <HAL_I2C_Init+0x176>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1e58      	subs	r0, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6859      	ldr	r1, [r3, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	0099      	lsls	r1, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_I2C_Init+0x17e>
 8002012:	2301      	movs	r3, #1
 8002014:	e022      	b.n	800205c <HAL_I2C_Init+0x1c4>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10e      	bne.n	800203c <HAL_I2C_Init+0x1a4>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1e58      	subs	r0, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6859      	ldr	r1, [r3, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	440b      	add	r3, r1
 800202c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002030:	3301      	adds	r3, #1
 8002032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800203a:	e00f      	b.n	800205c <HAL_I2C_Init+0x1c4>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1e58      	subs	r0, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6859      	ldr	r1, [r3, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	0099      	lsls	r1, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002052:	3301      	adds	r3, #1
 8002054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002058:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	6809      	ldr	r1, [r1, #0]
 8002060:	4313      	orrs	r3, r2
 8002062:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69da      	ldr	r2, [r3, #28]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800208a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6911      	ldr	r1, [r2, #16]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68d2      	ldr	r2, [r2, #12]
 8002096:	4311      	orrs	r1, r2
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	430b      	orrs	r3, r1
 800209e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695a      	ldr	r2, [r3, #20]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	000186a0 	.word	0x000186a0
 80020f8:	001e847f 	.word	0x001e847f
 80020fc:	003d08ff 	.word	0x003d08ff
 8002100:	431bde83 	.word	0x431bde83
 8002104:	10624dd3 	.word	0x10624dd3

08002108 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af02      	add	r7, sp, #8
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	461a      	mov	r2, r3
 8002114:	460b      	mov	r3, r1
 8002116:	817b      	strh	r3, [r7, #10]
 8002118:	4613      	mov	r3, r2
 800211a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800211c:	f7fe fa4c 	bl	80005b8 <HAL_GetTick>
 8002120:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b20      	cmp	r3, #32
 800212c:	f040 80e0 	bne.w	80022f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2319      	movs	r3, #25
 8002136:	2201      	movs	r2, #1
 8002138:	4970      	ldr	r1, [pc, #448]	; (80022fc <HAL_I2C_Master_Transmit+0x1f4>)
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 fd90 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002146:	2302      	movs	r3, #2
 8002148:	e0d3      	b.n	80022f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_I2C_Master_Transmit+0x50>
 8002154:	2302      	movs	r3, #2
 8002156:	e0cc      	b.n	80022f2 <HAL_I2C_Master_Transmit+0x1ea>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b01      	cmp	r3, #1
 800216c:	d007      	beq.n	800217e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0201 	orr.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800218c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2221      	movs	r2, #33	; 0x21
 8002192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2210      	movs	r2, #16
 800219a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	893a      	ldrh	r2, [r7, #8]
 80021ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4a50      	ldr	r2, [pc, #320]	; (8002300 <HAL_I2C_Master_Transmit+0x1f8>)
 80021be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021c0:	8979      	ldrh	r1, [r7, #10]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	6a3a      	ldr	r2, [r7, #32]
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 fbfc 	bl	80029c4 <I2C_MasterRequestWrite>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e08d      	b.n	80022f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021ec:	e066      	b.n	80022bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	6a39      	ldr	r1, [r7, #32]
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 fe0a 	bl	8002e0c <I2C_WaitOnTXEFlagUntilTimeout>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00d      	beq.n	800221a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	2b04      	cmp	r3, #4
 8002204:	d107      	bne.n	8002216 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002214:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e06b      	b.n	80022f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	781a      	ldrb	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29b      	uxth	r3, r3
 8002236:	3b01      	subs	r3, #1
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b04      	cmp	r3, #4
 8002256:	d11b      	bne.n	8002290 <HAL_I2C_Master_Transmit+0x188>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225c:	2b00      	cmp	r3, #0
 800225e:	d017      	beq.n	8002290 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	781a      	ldrb	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	6a39      	ldr	r1, [r7, #32]
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 fdfa 	bl	8002e8e <I2C_WaitOnBTFFlagUntilTimeout>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00d      	beq.n	80022bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d107      	bne.n	80022b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e01a      	b.n	80022f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d194      	bne.n	80021ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	e000      	b.n	80022f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022f0:	2302      	movs	r3, #2
  }
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	00100002 	.word	0x00100002
 8002300:	ffff0000 	.word	0xffff0000

08002304 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08c      	sub	sp, #48	; 0x30
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	461a      	mov	r2, r3
 8002310:	460b      	mov	r3, r1
 8002312:	817b      	strh	r3, [r7, #10]
 8002314:	4613      	mov	r3, r2
 8002316:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002318:	f7fe f94e 	bl	80005b8 <HAL_GetTick>
 800231c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b20      	cmp	r3, #32
 8002328:	f040 820b 	bne.w	8002742 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2319      	movs	r3, #25
 8002332:	2201      	movs	r2, #1
 8002334:	497c      	ldr	r1, [pc, #496]	; (8002528 <HAL_I2C_Master_Receive+0x224>)
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 fc92 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002342:	2302      	movs	r3, #2
 8002344:	e1fe      	b.n	8002744 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_I2C_Master_Receive+0x50>
 8002350:	2302      	movs	r3, #2
 8002352:	e1f7      	b.n	8002744 <HAL_I2C_Master_Receive+0x440>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b01      	cmp	r3, #1
 8002368:	d007      	beq.n	800237a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 0201 	orr.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002388:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2222      	movs	r2, #34	; 0x22
 800238e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2210      	movs	r2, #16
 8002396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	893a      	ldrh	r2, [r7, #8]
 80023aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4a5c      	ldr	r2, [pc, #368]	; (800252c <HAL_I2C_Master_Receive+0x228>)
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023bc:	8979      	ldrh	r1, [r7, #10]
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 fb80 	bl	8002ac8 <I2C_MasterRequestRead>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e1b8      	b.n	8002744 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d113      	bne.n	8002402 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	623b      	str	r3, [r7, #32]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	623b      	str	r3, [r7, #32]
 80023ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e18c      	b.n	800271c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002406:	2b01      	cmp	r3, #1
 8002408:	d11b      	bne.n	8002442 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002418:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	e16c      	b.n	800271c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002446:	2b02      	cmp	r3, #2
 8002448:	d11b      	bne.n	8002482 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002458:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002468:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	61bb      	str	r3, [r7, #24]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	e14c      	b.n	800271c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002490:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024a8:	e138      	b.n	800271c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	f200 80f1 	bhi.w	8002696 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d123      	bne.n	8002504 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 fd25 	bl	8002f10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e139      	b.n	8002744 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002502:	e10b      	b.n	800271c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002508:	2b02      	cmp	r3, #2
 800250a:	d14e      	bne.n	80025aa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	2200      	movs	r2, #0
 8002514:	4906      	ldr	r1, [pc, #24]	; (8002530 <HAL_I2C_Master_Receive+0x22c>)
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fba2 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e10e      	b.n	8002744 <HAL_I2C_Master_Receive+0x440>
 8002526:	bf00      	nop
 8002528:	00100002 	.word	0x00100002
 800252c:	ffff0000 	.word	0xffff0000
 8002530:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002542:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691a      	ldr	r2, [r3, #16]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259e:	b29b      	uxth	r3, r3
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025a8:	e0b8      	b.n	800271c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b0:	2200      	movs	r2, #0
 80025b2:	4966      	ldr	r1, [pc, #408]	; (800274c <HAL_I2C_Master_Receive+0x448>)
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 fb53 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0bf      	b.n	8002744 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260c:	2200      	movs	r2, #0
 800260e:	494f      	ldr	r1, [pc, #316]	; (800274c <HAL_I2C_Master_Receive+0x448>)
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 fb25 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e091      	b.n	8002744 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002694:	e042      	b.n	800271c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002698:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fc38 	bl	8002f10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e04c      	b.n	8002744 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d118      	bne.n	800271c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002720:	2b00      	cmp	r3, #0
 8002722:	f47f aec2 	bne.w	80024aa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	e000      	b.n	8002744 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002742:	2302      	movs	r3, #2
  }
}
 8002744:	4618      	mov	r0, r3
 8002746:	3728      	adds	r7, #40	; 0x28
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	00010004 	.word	0x00010004

08002750 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	; 0x28
 8002754:	af02      	add	r7, sp, #8
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	460b      	mov	r3, r1
 800275e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002760:	f7fd ff2a 	bl	80005b8 <HAL_GetTick>
 8002764:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002766:	2301      	movs	r3, #1
 8002768:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b20      	cmp	r3, #32
 8002774:	f040 8110 	bne.w	8002998 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	2319      	movs	r3, #25
 800277e:	2201      	movs	r2, #1
 8002780:	4988      	ldr	r1, [pc, #544]	; (80029a4 <HAL_I2C_IsDeviceReady+0x254>)
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 fa6c 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800278e:	2302      	movs	r3, #2
 8002790:	e103      	b.n	800299a <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_I2C_IsDeviceReady+0x50>
 800279c:	2302      	movs	r3, #2
 800279e:	e0fc      	b.n	800299a <HAL_I2C_IsDeviceReady+0x24a>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d007      	beq.n	80027c6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f042 0201 	orr.w	r2, r2, #1
 80027c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2224      	movs	r2, #36	; 0x24
 80027da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4a70      	ldr	r2, [pc, #448]	; (80029a8 <HAL_I2C_IsDeviceReady+0x258>)
 80027e8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027f8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2200      	movs	r2, #0
 8002802:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 fa2a 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00c      	beq.n	800282c <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002826:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e0b6      	b.n	800299a <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800282c:	897b      	ldrh	r3, [r7, #10]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800283a:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800283c:	f7fd febc 	bl	80005b8 <HAL_GetTick>
 8002840:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b02      	cmp	r3, #2
 800284e:	bf0c      	ite	eq
 8002850:	2301      	moveq	r3, #1
 8002852:	2300      	movne	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002866:	bf0c      	ite	eq
 8002868:	2301      	moveq	r3, #1
 800286a:	2300      	movne	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002870:	e025      	b.n	80028be <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002872:	f7fd fea1 	bl	80005b8 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d302      	bcc.n	8002888 <HAL_I2C_IsDeviceReady+0x138>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d103      	bne.n	8002890 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	22a0      	movs	r2, #160	; 0xa0
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b02      	cmp	r3, #2
 800289c:	bf0c      	ite	eq
 800289e:	2301      	moveq	r3, #1
 80028a0:	2300      	movne	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b4:	bf0c      	ite	eq
 80028b6:	2301      	moveq	r3, #1
 80028b8:	2300      	movne	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2ba0      	cmp	r3, #160	; 0xa0
 80028c8:	d005      	beq.n	80028d6 <HAL_I2C_IsDeviceReady+0x186>
 80028ca:	7dfb      	ldrb	r3, [r7, #23]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <HAL_I2C_IsDeviceReady+0x186>
 80028d0:	7dbb      	ldrb	r3, [r7, #22]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0cd      	beq.n	8002872 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d129      	bne.n	8002940 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fa:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028fc:	2300      	movs	r3, #0
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	2319      	movs	r3, #25
 8002918:	2201      	movs	r2, #1
 800291a:	4922      	ldr	r1, [pc, #136]	; (80029a4 <HAL_I2C_IsDeviceReady+0x254>)
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f99f 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e036      	b.n	800299a <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	e02c      	b.n	800299a <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294e:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002958:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	2319      	movs	r3, #25
 8002960:	2201      	movs	r2, #1
 8002962:	4910      	ldr	r1, [pc, #64]	; (80029a4 <HAL_I2C_IsDeviceReady+0x254>)
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 f97b 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e012      	b.n	800299a <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	3301      	adds	r3, #1
 8002978:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	429a      	cmp	r2, r3
 8002980:	f4ff af33 	bcc.w	80027ea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8002998:	2302      	movs	r3, #2
  }
}
 800299a:	4618      	mov	r0, r3
 800299c:	3720      	adds	r7, #32
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	00100002 	.word	0x00100002
 80029a8:	ffff0000 	.word	0xffff0000

080029ac <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	460b      	mov	r3, r1
 80029d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d006      	beq.n	80029ee <I2C_MasterRequestWrite+0x2a>
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d003      	beq.n	80029ee <I2C_MasterRequestWrite+0x2a>
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029ec:	d108      	bne.n	8002a00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	e00b      	b.n	8002a18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	2b12      	cmp	r3, #18
 8002a06:	d107      	bne.n	8002a18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f91b 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00c      	beq.n	8002a4a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e035      	b.n	8002ab6 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a52:	d108      	bne.n	8002a66 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a54:	897b      	ldrh	r3, [r7, #10]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a62:	611a      	str	r2, [r3, #16]
 8002a64:	e01b      	b.n	8002a9e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a66:	897b      	ldrh	r3, [r7, #10]
 8002a68:	11db      	asrs	r3, r3, #7
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f003 0306 	and.w	r3, r3, #6
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f063 030f 	orn	r3, r3, #15
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	490f      	ldr	r1, [pc, #60]	; (8002ac0 <I2C_MasterRequestWrite+0xfc>)
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f942 	bl	8002d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e010      	b.n	8002ab6 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a94:	897b      	ldrh	r3, [r7, #10]
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	4908      	ldr	r1, [pc, #32]	; (8002ac4 <I2C_MasterRequestWrite+0x100>)
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f932 	bl	8002d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	00010008 	.word	0x00010008
 8002ac4:	00010002 	.word	0x00010002

08002ac8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002aec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d006      	beq.n	8002b02 <I2C_MasterRequestRead+0x3a>
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d003      	beq.n	8002b02 <I2C_MasterRequestRead+0x3a>
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b00:	d108      	bne.n	8002b14 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	e00b      	b.n	8002b2c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	2b11      	cmp	r3, #17
 8002b1a:	d107      	bne.n	8002b2c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 f891 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00c      	beq.n	8002b5e <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e078      	b.n	8002c50 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b66:	d108      	bne.n	8002b7a <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b68:	897b      	ldrh	r3, [r7, #10]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	611a      	str	r2, [r3, #16]
 8002b78:	e05e      	b.n	8002c38 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b7a:	897b      	ldrh	r3, [r7, #10]
 8002b7c:	11db      	asrs	r3, r3, #7
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f003 0306 	and.w	r3, r3, #6
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	f063 030f 	orn	r3, r3, #15
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	4930      	ldr	r1, [pc, #192]	; (8002c58 <I2C_MasterRequestRead+0x190>)
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f8b8 	bl	8002d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e053      	b.n	8002c50 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ba8:	897b      	ldrh	r3, [r7, #10]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4929      	ldr	r1, [pc, #164]	; (8002c5c <I2C_MasterRequestRead+0x194>)
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f8a8 	bl	8002d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e043      	b.n	8002c50 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc8:	2300      	movs	r3, #0
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bec:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f830 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00c      	beq.n	8002c20 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e017      	b.n	8002c50 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c20:	897b      	ldrh	r3, [r7, #10]
 8002c22:	11db      	asrs	r3, r3, #7
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	f003 0306 	and.w	r3, r3, #6
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f063 030e 	orn	r3, r3, #14
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	4907      	ldr	r1, [pc, #28]	; (8002c5c <I2C_MasterRequestRead+0x194>)
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f865 	bl	8002d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	00010008 	.word	0x00010008
 8002c5c:	00010002 	.word	0x00010002

08002c60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c70:	e025      	b.n	8002cbe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d021      	beq.n	8002cbe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7a:	f7fd fc9d 	bl	80005b8 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d302      	bcc.n	8002c90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d116      	bne.n	8002cbe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f043 0220 	orr.w	r2, r3, #32
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e023      	b.n	8002d06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d10d      	bne.n	8002ce4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf0c      	ite	eq
 8002cda:	2301      	moveq	r3, #1
 8002cdc:	2300      	movne	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	e00c      	b.n	8002cfe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	43da      	mvns	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	bf0c      	ite	eq
 8002cf6:	2301      	moveq	r3, #1
 8002cf8:	2300      	movne	r3, #0
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d0b6      	beq.n	8002c72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d1c:	e051      	b.n	8002dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2c:	d123      	bne.n	8002d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f043 0204 	orr.w	r2, r3, #4
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e046      	b.n	8002e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d021      	beq.n	8002dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7e:	f7fd fc1b 	bl	80005b8 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d302      	bcc.n	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d116      	bne.n	8002dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f043 0220 	orr.w	r2, r3, #32
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e020      	b.n	8002e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	0c1b      	lsrs	r3, r3, #16
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d10c      	bne.n	8002de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	bf14      	ite	ne
 8002dde:	2301      	movne	r3, #1
 8002de0:	2300      	moveq	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	e00b      	b.n	8002dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	43da      	mvns	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	4013      	ands	r3, r2
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d18d      	bne.n	8002d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e18:	e02d      	b.n	8002e76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f8ce 	bl	8002fbc <I2C_IsAcknowledgeFailed>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e02d      	b.n	8002e86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d021      	beq.n	8002e76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e32:	f7fd fbc1 	bl	80005b8 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d302      	bcc.n	8002e48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d116      	bne.n	8002e76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f043 0220 	orr.w	r2, r3, #32
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e007      	b.n	8002e86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e80:	2b80      	cmp	r3, #128	; 0x80
 8002e82:	d1ca      	bne.n	8002e1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e9a:	e02d      	b.n	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 f88d 	bl	8002fbc <I2C_IsAcknowledgeFailed>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e02d      	b.n	8002f08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb2:	d021      	beq.n	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb4:	f7fd fb80 	bl	80005b8 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d302      	bcc.n	8002eca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d116      	bne.n	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e007      	b.n	8002f08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d1ca      	bne.n	8002e9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f1c:	e042      	b.n	8002fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b10      	cmp	r3, #16
 8002f2a:	d119      	bne.n	8002f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0210 	mvn.w	r2, #16
 8002f34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e029      	b.n	8002fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f60:	f7fd fb2a 	bl	80005b8 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d302      	bcc.n	8002f76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d116      	bne.n	8002fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f043 0220 	orr.w	r2, r3, #32
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e007      	b.n	8002fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b40      	cmp	r3, #64	; 0x40
 8002fb0:	d1b5      	bne.n	8002f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd2:	d11b      	bne.n	800300c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fdc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f043 0204 	orr.w	r2, r3, #4
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e25b      	b.n	80034e6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d075      	beq.n	8003126 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800303a:	4ba3      	ldr	r3, [pc, #652]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b04      	cmp	r3, #4
 8003044:	d00c      	beq.n	8003060 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003046:	4ba0      	ldr	r3, [pc, #640]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800304e:	2b08      	cmp	r3, #8
 8003050:	d112      	bne.n	8003078 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003052:	4b9d      	ldr	r3, [pc, #628]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800305e:	d10b      	bne.n	8003078 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003060:	4b99      	ldr	r3, [pc, #612]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d05b      	beq.n	8003124 <HAL_RCC_OscConfig+0x108>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d157      	bne.n	8003124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e236      	b.n	80034e6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003080:	d106      	bne.n	8003090 <HAL_RCC_OscConfig+0x74>
 8003082:	4b91      	ldr	r3, [pc, #580]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a90      	ldr	r2, [pc, #576]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	e01d      	b.n	80030cc <HAL_RCC_OscConfig+0xb0>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003098:	d10c      	bne.n	80030b4 <HAL_RCC_OscConfig+0x98>
 800309a:	4b8b      	ldr	r3, [pc, #556]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a8a      	ldr	r2, [pc, #552]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	4b88      	ldr	r3, [pc, #544]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a87      	ldr	r2, [pc, #540]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 80030ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	e00b      	b.n	80030cc <HAL_RCC_OscConfig+0xb0>
 80030b4:	4b84      	ldr	r3, [pc, #528]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a83      	ldr	r2, [pc, #524]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 80030ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	4b81      	ldr	r3, [pc, #516]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a80      	ldr	r2, [pc, #512]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 80030c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d013      	beq.n	80030fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7fd fa70 	bl	80005b8 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030dc:	f7fd fa6c 	bl	80005b8 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e1fb      	b.n	80034e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ee:	4b76      	ldr	r3, [pc, #472]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0xc0>
 80030fa:	e014      	b.n	8003126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7fd fa5c 	bl	80005b8 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003104:	f7fd fa58 	bl	80005b8 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	; 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e1e7      	b.n	80034e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003116:	4b6c      	ldr	r3, [pc, #432]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0xe8>
 8003122:	e000      	b.n	8003126 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d063      	beq.n	80031fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003132:	4b65      	ldr	r3, [pc, #404]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00b      	beq.n	8003156 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313e:	4b62      	ldr	r3, [pc, #392]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003146:	2b08      	cmp	r3, #8
 8003148:	d11c      	bne.n	8003184 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800314a:	4b5f      	ldr	r3, [pc, #380]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d116      	bne.n	8003184 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003156:	4b5c      	ldr	r3, [pc, #368]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_RCC_OscConfig+0x152>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d001      	beq.n	800316e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e1bb      	b.n	80034e6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316e:	4b56      	ldr	r3, [pc, #344]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4952      	ldr	r1, [pc, #328]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003182:	e03a      	b.n	80031fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d020      	beq.n	80031ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800318c:	4b4f      	ldr	r3, [pc, #316]	; (80032cc <HAL_RCC_OscConfig+0x2b0>)
 800318e:	2201      	movs	r2, #1
 8003190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003192:	f7fd fa11 	bl	80005b8 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800319a:	f7fd fa0d 	bl	80005b8 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e19c      	b.n	80034e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ac:	4b46      	ldr	r3, [pc, #280]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b8:	4b43      	ldr	r3, [pc, #268]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4940      	ldr	r1, [pc, #256]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	600b      	str	r3, [r1, #0]
 80031cc:	e015      	b.n	80031fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ce:	4b3f      	ldr	r3, [pc, #252]	; (80032cc <HAL_RCC_OscConfig+0x2b0>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7fd f9f0 	bl	80005b8 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031dc:	f7fd f9ec 	bl	80005b8 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e17b      	b.n	80034e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ee:	4b36      	ldr	r3, [pc, #216]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d030      	beq.n	8003268 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d016      	beq.n	800323c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320e:	4b30      	ldr	r3, [pc, #192]	; (80032d0 <HAL_RCC_OscConfig+0x2b4>)
 8003210:	2201      	movs	r2, #1
 8003212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003214:	f7fd f9d0 	bl	80005b8 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800321c:	f7fd f9cc 	bl	80005b8 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e15b      	b.n	80034e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322e:	4b26      	ldr	r3, [pc, #152]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 8003230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x200>
 800323a:	e015      	b.n	8003268 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800323c:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <HAL_RCC_OscConfig+0x2b4>)
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003242:	f7fd f9b9 	bl	80005b8 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800324a:	f7fd f9b5 	bl	80005b8 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e144      	b.n	80034e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800325c:	4b1a      	ldr	r3, [pc, #104]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 800325e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f0      	bne.n	800324a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80a0 	beq.w	80033b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003276:	2300      	movs	r3, #0
 8003278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800327a:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10f      	bne.n	80032a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	4b0f      	ldr	r3, [pc, #60]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	4a0e      	ldr	r2, [pc, #56]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 8003290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003294:	6413      	str	r3, [r2, #64]	; 0x40
 8003296:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <HAL_RCC_OscConfig+0x2ac>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a2:	2301      	movs	r3, #1
 80032a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a6:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_RCC_OscConfig+0x2b8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d121      	bne.n	80032f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <HAL_RCC_OscConfig+0x2b8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a07      	ldr	r2, [pc, #28]	; (80032d4 <HAL_RCC_OscConfig+0x2b8>)
 80032b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032be:	f7fd f97b 	bl	80005b8 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c4:	e011      	b.n	80032ea <HAL_RCC_OscConfig+0x2ce>
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800
 80032cc:	42470000 	.word	0x42470000
 80032d0:	42470e80 	.word	0x42470e80
 80032d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d8:	f7fd f96e 	bl	80005b8 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e0fd      	b.n	80034e6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ea:	4b81      	ldr	r3, [pc, #516]	; (80034f0 <HAL_RCC_OscConfig+0x4d4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d106      	bne.n	800330c <HAL_RCC_OscConfig+0x2f0>
 80032fe:	4b7d      	ldr	r3, [pc, #500]	; (80034f4 <HAL_RCC_OscConfig+0x4d8>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	4a7c      	ldr	r2, [pc, #496]	; (80034f4 <HAL_RCC_OscConfig+0x4d8>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6713      	str	r3, [r2, #112]	; 0x70
 800330a:	e01c      	b.n	8003346 <HAL_RCC_OscConfig+0x32a>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b05      	cmp	r3, #5
 8003312:	d10c      	bne.n	800332e <HAL_RCC_OscConfig+0x312>
 8003314:	4b77      	ldr	r3, [pc, #476]	; (80034f4 <HAL_RCC_OscConfig+0x4d8>)
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	4a76      	ldr	r2, [pc, #472]	; (80034f4 <HAL_RCC_OscConfig+0x4d8>)
 800331a:	f043 0304 	orr.w	r3, r3, #4
 800331e:	6713      	str	r3, [r2, #112]	; 0x70
 8003320:	4b74      	ldr	r3, [pc, #464]	; (80034f4 <HAL_RCC_OscConfig+0x4d8>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	4a73      	ldr	r2, [pc, #460]	; (80034f4 <HAL_RCC_OscConfig+0x4d8>)
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	6713      	str	r3, [r2, #112]	; 0x70
 800332c:	e00b      	b.n	8003346 <HAL_RCC_OscConfig+0x32a>
 800332e:	4b71      	ldr	r3, [pc, #452]	; (80034f4 <HAL_RCC_OscConfig+0x4d8>)
 8003330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003332:	4a70      	ldr	r2, [pc, #448]	; (80034f4 <HAL_RCC_OscConfig+0x4d8>)
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	6713      	str	r3, [r2, #112]	; 0x70
 800333a:	4b6e      	ldr	r3, [pc, #440]	; (80034f4 <HAL_RCC_OscConfig+0x4d8>)
 800333c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333e:	4a6d      	ldr	r2, [pc, #436]	; (80034f4 <HAL_RCC_OscConfig+0x4d8>)
 8003340:	f023 0304 	bic.w	r3, r3, #4
 8003344:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d015      	beq.n	800337a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334e:	f7fd f933 	bl	80005b8 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003354:	e00a      	b.n	800336c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003356:	f7fd f92f 	bl	80005b8 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f241 3288 	movw	r2, #5000	; 0x1388
 8003364:	4293      	cmp	r3, r2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e0bc      	b.n	80034e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336c:	4b61      	ldr	r3, [pc, #388]	; (80034f4 <HAL_RCC_OscConfig+0x4d8>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0ee      	beq.n	8003356 <HAL_RCC_OscConfig+0x33a>
 8003378:	e014      	b.n	80033a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337a:	f7fd f91d 	bl	80005b8 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fd f919 	bl	80005b8 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e0a6      	b.n	80034e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003398:	4b56      	ldr	r3, [pc, #344]	; (80034f4 <HAL_RCC_OscConfig+0x4d8>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1ee      	bne.n	8003382 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033a4:	7dfb      	ldrb	r3, [r7, #23]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d105      	bne.n	80033b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033aa:	4b52      	ldr	r3, [pc, #328]	; (80034f4 <HAL_RCC_OscConfig+0x4d8>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	4a51      	ldr	r2, [pc, #324]	; (80034f4 <HAL_RCC_OscConfig+0x4d8>)
 80033b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 8092 	beq.w	80034e4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033c0:	4b4c      	ldr	r3, [pc, #304]	; (80034f4 <HAL_RCC_OscConfig+0x4d8>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 030c 	and.w	r3, r3, #12
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d05c      	beq.n	8003486 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d141      	bne.n	8003458 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d4:	4b48      	ldr	r3, [pc, #288]	; (80034f8 <HAL_RCC_OscConfig+0x4dc>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033da:	f7fd f8ed 	bl	80005b8 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e2:	f7fd f8e9 	bl	80005b8 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e078      	b.n	80034e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f4:	4b3f      	ldr	r3, [pc, #252]	; (80034f4 <HAL_RCC_OscConfig+0x4d8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f0      	bne.n	80033e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69da      	ldr	r2, [r3, #28]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	019b      	lsls	r3, r3, #6
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	3b01      	subs	r3, #1
 800341a:	041b      	lsls	r3, r3, #16
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	061b      	lsls	r3, r3, #24
 8003424:	4933      	ldr	r1, [pc, #204]	; (80034f4 <HAL_RCC_OscConfig+0x4d8>)
 8003426:	4313      	orrs	r3, r2
 8003428:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800342a:	4b33      	ldr	r3, [pc, #204]	; (80034f8 <HAL_RCC_OscConfig+0x4dc>)
 800342c:	2201      	movs	r2, #1
 800342e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fd f8c2 	bl	80005b8 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003438:	f7fd f8be 	bl	80005b8 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e04d      	b.n	80034e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344a:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <HAL_RCC_OscConfig+0x4d8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0x41c>
 8003456:	e045      	b.n	80034e4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003458:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <HAL_RCC_OscConfig+0x4dc>)
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345e:	f7fd f8ab 	bl	80005b8 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003466:	f7fd f8a7 	bl	80005b8 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e036      	b.n	80034e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003478:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <HAL_RCC_OscConfig+0x4d8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f0      	bne.n	8003466 <HAL_RCC_OscConfig+0x44a>
 8003484:	e02e      	b.n	80034e4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e029      	b.n	80034e6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003492:	4b18      	ldr	r3, [pc, #96]	; (80034f4 <HAL_RCC_OscConfig+0x4d8>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d11c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d115      	bne.n	80034e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034ba:	4013      	ands	r3, r2
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d10d      	bne.n	80034e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d106      	bne.n	80034e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40007000 	.word	0x40007000
 80034f4:	40023800 	.word	0x40023800
 80034f8:	42470060 	.word	0x42470060

080034fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0cc      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003510:	4b68      	ldr	r3, [pc, #416]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d90c      	bls.n	8003538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b65      	ldr	r3, [pc, #404]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b63      	ldr	r3, [pc, #396]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0b8      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d020      	beq.n	8003586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003550:	4b59      	ldr	r3, [pc, #356]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a58      	ldr	r2, [pc, #352]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800355a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003568:	4b53      	ldr	r3, [pc, #332]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4a52      	ldr	r2, [pc, #328]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003574:	4b50      	ldr	r3, [pc, #320]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	494d      	ldr	r1, [pc, #308]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d044      	beq.n	800361c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d107      	bne.n	80035aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	4b47      	ldr	r3, [pc, #284]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d119      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e07f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d003      	beq.n	80035ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ba:	4b3f      	ldr	r3, [pc, #252]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e06f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ca:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e067      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035da:	4b37      	ldr	r3, [pc, #220]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f023 0203 	bic.w	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4934      	ldr	r1, [pc, #208]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035ec:	f7fc ffe4 	bl	80005b8 <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	e00a      	b.n	800360a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f4:	f7fc ffe0 	bl	80005b8 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e04f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	4b2b      	ldr	r3, [pc, #172]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 020c 	and.w	r2, r3, #12
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	429a      	cmp	r2, r3
 800361a:	d1eb      	bne.n	80035f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800361c:	4b25      	ldr	r3, [pc, #148]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d20c      	bcs.n	8003644 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b20      	ldr	r3, [pc, #128]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e032      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003650:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4916      	ldr	r1, [pc, #88]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	4313      	orrs	r3, r2
 8003660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800366e:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	490e      	ldr	r1, [pc, #56]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003682:	f000 f821 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 8003686:	4601      	mov	r1, r0
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	4a0a      	ldr	r2, [pc, #40]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	5cd3      	ldrb	r3, [r2, r3]
 8003696:	fa21 f303 	lsr.w	r3, r1, r3
 800369a:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fc ff44 	bl	8000530 <HAL_InitTick>

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40023c00 	.word	0x40023c00
 80036b8:	40023800 	.word	0x40023800
 80036bc:	08005c44 	.word	0x08005c44
 80036c0:	20000234 	.word	0x20000234
 80036c4:	20000000 	.word	0x20000000

080036c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	607b      	str	r3, [r7, #4]
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	2300      	movs	r3, #0
 80036d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036de:	4b63      	ldr	r3, [pc, #396]	; (800386c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 030c 	and.w	r3, r3, #12
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d007      	beq.n	80036fa <HAL_RCC_GetSysClockFreq+0x32>
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d008      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0x38>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f040 80b4 	bne.w	800385c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036f4:	4b5e      	ldr	r3, [pc, #376]	; (8003870 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036f6:	60bb      	str	r3, [r7, #8]
       break;
 80036f8:	e0b3      	b.n	8003862 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036fa:	4b5e      	ldr	r3, [pc, #376]	; (8003874 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80036fc:	60bb      	str	r3, [r7, #8]
      break;
 80036fe:	e0b0      	b.n	8003862 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003700:	4b5a      	ldr	r3, [pc, #360]	; (800386c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003708:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800370a:	4b58      	ldr	r3, [pc, #352]	; (800386c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d04a      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003716:	4b55      	ldr	r3, [pc, #340]	; (800386c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	099b      	lsrs	r3, r3, #6
 800371c:	f04f 0400 	mov.w	r4, #0
 8003720:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	ea03 0501 	and.w	r5, r3, r1
 800372c:	ea04 0602 	and.w	r6, r4, r2
 8003730:	4629      	mov	r1, r5
 8003732:	4632      	mov	r2, r6
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	f04f 0400 	mov.w	r4, #0
 800373c:	0154      	lsls	r4, r2, #5
 800373e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003742:	014b      	lsls	r3, r1, #5
 8003744:	4619      	mov	r1, r3
 8003746:	4622      	mov	r2, r4
 8003748:	1b49      	subs	r1, r1, r5
 800374a:	eb62 0206 	sbc.w	r2, r2, r6
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	f04f 0400 	mov.w	r4, #0
 8003756:	0194      	lsls	r4, r2, #6
 8003758:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800375c:	018b      	lsls	r3, r1, #6
 800375e:	1a5b      	subs	r3, r3, r1
 8003760:	eb64 0402 	sbc.w	r4, r4, r2
 8003764:	f04f 0100 	mov.w	r1, #0
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	00e2      	lsls	r2, r4, #3
 800376e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003772:	00d9      	lsls	r1, r3, #3
 8003774:	460b      	mov	r3, r1
 8003776:	4614      	mov	r4, r2
 8003778:	195b      	adds	r3, r3, r5
 800377a:	eb44 0406 	adc.w	r4, r4, r6
 800377e:	f04f 0100 	mov.w	r1, #0
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	0262      	lsls	r2, r4, #9
 8003788:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800378c:	0259      	lsls	r1, r3, #9
 800378e:	460b      	mov	r3, r1
 8003790:	4614      	mov	r4, r2
 8003792:	4618      	mov	r0, r3
 8003794:	4621      	mov	r1, r4
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f04f 0400 	mov.w	r4, #0
 800379c:	461a      	mov	r2, r3
 800379e:	4623      	mov	r3, r4
 80037a0:	f7fc fd24 	bl	80001ec <__aeabi_uldivmod>
 80037a4:	4603      	mov	r3, r0
 80037a6:	460c      	mov	r4, r1
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	e049      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ac:	4b2f      	ldr	r3, [pc, #188]	; (800386c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	099b      	lsrs	r3, r3, #6
 80037b2:	f04f 0400 	mov.w	r4, #0
 80037b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	ea03 0501 	and.w	r5, r3, r1
 80037c2:	ea04 0602 	and.w	r6, r4, r2
 80037c6:	4629      	mov	r1, r5
 80037c8:	4632      	mov	r2, r6
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	f04f 0400 	mov.w	r4, #0
 80037d2:	0154      	lsls	r4, r2, #5
 80037d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037d8:	014b      	lsls	r3, r1, #5
 80037da:	4619      	mov	r1, r3
 80037dc:	4622      	mov	r2, r4
 80037de:	1b49      	subs	r1, r1, r5
 80037e0:	eb62 0206 	sbc.w	r2, r2, r6
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	f04f 0400 	mov.w	r4, #0
 80037ec:	0194      	lsls	r4, r2, #6
 80037ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037f2:	018b      	lsls	r3, r1, #6
 80037f4:	1a5b      	subs	r3, r3, r1
 80037f6:	eb64 0402 	sbc.w	r4, r4, r2
 80037fa:	f04f 0100 	mov.w	r1, #0
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	00e2      	lsls	r2, r4, #3
 8003804:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003808:	00d9      	lsls	r1, r3, #3
 800380a:	460b      	mov	r3, r1
 800380c:	4614      	mov	r4, r2
 800380e:	195b      	adds	r3, r3, r5
 8003810:	eb44 0406 	adc.w	r4, r4, r6
 8003814:	f04f 0100 	mov.w	r1, #0
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	02a2      	lsls	r2, r4, #10
 800381e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003822:	0299      	lsls	r1, r3, #10
 8003824:	460b      	mov	r3, r1
 8003826:	4614      	mov	r4, r2
 8003828:	4618      	mov	r0, r3
 800382a:	4621      	mov	r1, r4
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f04f 0400 	mov.w	r4, #0
 8003832:	461a      	mov	r2, r3
 8003834:	4623      	mov	r3, r4
 8003836:	f7fc fcd9 	bl	80001ec <__aeabi_uldivmod>
 800383a:	4603      	mov	r3, r0
 800383c:	460c      	mov	r4, r1
 800383e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003840:	4b0a      	ldr	r3, [pc, #40]	; (800386c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	0c1b      	lsrs	r3, r3, #16
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	3301      	adds	r3, #1
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	fbb2 f3f3 	udiv	r3, r2, r3
 8003858:	60bb      	str	r3, [r7, #8]
      break;
 800385a:	e002      	b.n	8003862 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800385c:	4b04      	ldr	r3, [pc, #16]	; (8003870 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800385e:	60bb      	str	r3, [r7, #8]
      break;
 8003860:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003862:	68bb      	ldr	r3, [r7, #8]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800386c:	40023800 	.word	0x40023800
 8003870:	00f42400 	.word	0x00f42400
 8003874:	007a1200 	.word	0x007a1200

08003878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800387c:	4b03      	ldr	r3, [pc, #12]	; (800388c <HAL_RCC_GetHCLKFreq+0x14>)
 800387e:	681b      	ldr	r3, [r3, #0]
}
 8003880:	4618      	mov	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20000234 	.word	0x20000234

08003890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003894:	f7ff fff0 	bl	8003878 <HAL_RCC_GetHCLKFreq>
 8003898:	4601      	mov	r1, r0
 800389a:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	0a9b      	lsrs	r3, r3, #10
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	4a03      	ldr	r2, [pc, #12]	; (80038b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038a6:	5cd3      	ldrb	r3, [r2, r3]
 80038a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40023800 	.word	0x40023800
 80038b4:	08005c54 	.word	0x08005c54

080038b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038bc:	f7ff ffdc 	bl	8003878 <HAL_RCC_GetHCLKFreq>
 80038c0:	4601      	mov	r1, r0
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	0b5b      	lsrs	r3, r3, #13
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	4a03      	ldr	r2, [pc, #12]	; (80038dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ce:	5cd3      	ldrb	r3, [r2, r3]
 80038d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40023800 	.word	0x40023800
 80038dc:	08005c54 	.word	0x08005c54

080038e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e03f      	b.n	8003972 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f001 ffd8 	bl	80058bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2224      	movs	r2, #36	; 0x24
 8003910:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003922:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f90b 	bl	8003b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003938:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003948:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003958:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b088      	sub	sp, #32
 800397e:	af02      	add	r7, sp, #8
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	603b      	str	r3, [r7, #0]
 8003986:	4613      	mov	r3, r2
 8003988:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b20      	cmp	r3, #32
 8003998:	f040 8083 	bne.w	8003aa2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_UART_Transmit+0x2e>
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e07b      	b.n	8003aa4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_UART_Transmit+0x40>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e074      	b.n	8003aa4 <HAL_UART_Transmit+0x12a>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2221      	movs	r2, #33	; 0x21
 80039cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80039d0:	f7fc fdf2 	bl	80005b8 <HAL_GetTick>
 80039d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	88fa      	ldrh	r2, [r7, #6]
 80039da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	88fa      	ldrh	r2, [r7, #6]
 80039e0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80039ea:	e042      	b.n	8003a72 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a02:	d122      	bne.n	8003a4a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2180      	movs	r1, #128	; 0x80
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f84c 	bl	8003aac <UART_WaitOnFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e042      	b.n	8003aa4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a30:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d103      	bne.n	8003a42 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	e017      	b.n	8003a72 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	3301      	adds	r3, #1
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	e013      	b.n	8003a72 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2200      	movs	r2, #0
 8003a52:	2180      	movs	r1, #128	; 0x80
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f829 	bl	8003aac <UART_WaitOnFlagUntilTimeout>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e01f      	b.n	8003aa4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	60ba      	str	r2, [r7, #8]
 8003a6a:	781a      	ldrb	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1b7      	bne.n	80039ec <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2200      	movs	r2, #0
 8003a84:	2140      	movs	r1, #64	; 0x40
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f810 	bl	8003aac <UART_WaitOnFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e006      	b.n	8003aa4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	e000      	b.n	8003aa4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003aa2:	2302      	movs	r3, #2
  }
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003abc:	e02c      	b.n	8003b18 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac4:	d028      	beq.n	8003b18 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d007      	beq.n	8003adc <UART_WaitOnFlagUntilTimeout+0x30>
 8003acc:	f7fc fd74 	bl	80005b8 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d21d      	bcs.n	8003b18 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003aea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695a      	ldr	r2, [r3, #20]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0201 	bic.w	r2, r2, #1
 8003afa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e00f      	b.n	8003b38 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	4013      	ands	r3, r2
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	bf0c      	ite	eq
 8003b28:	2301      	moveq	r3, #1
 8003b2a:	2300      	movne	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	461a      	mov	r2, r3
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d0c3      	beq.n	8003abe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b44:	b085      	sub	sp, #20
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b82:	f023 030c 	bic.w	r3, r3, #12
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	68f9      	ldr	r1, [r7, #12]
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699a      	ldr	r2, [r3, #24]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bae:	f040 818b 	bne.w	8003ec8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4ac1      	ldr	r2, [pc, #772]	; (8003ebc <UART_SetConfig+0x37c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d005      	beq.n	8003bc8 <UART_SetConfig+0x88>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4abf      	ldr	r2, [pc, #764]	; (8003ec0 <UART_SetConfig+0x380>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	f040 80bd 	bne.w	8003d42 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bc8:	f7ff fe76 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 8003bcc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	461d      	mov	r5, r3
 8003bd2:	f04f 0600 	mov.w	r6, #0
 8003bd6:	46a8      	mov	r8, r5
 8003bd8:	46b1      	mov	r9, r6
 8003bda:	eb18 0308 	adds.w	r3, r8, r8
 8003bde:	eb49 0409 	adc.w	r4, r9, r9
 8003be2:	4698      	mov	r8, r3
 8003be4:	46a1      	mov	r9, r4
 8003be6:	eb18 0805 	adds.w	r8, r8, r5
 8003bea:	eb49 0906 	adc.w	r9, r9, r6
 8003bee:	f04f 0100 	mov.w	r1, #0
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bfa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bfe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c02:	4688      	mov	r8, r1
 8003c04:	4691      	mov	r9, r2
 8003c06:	eb18 0005 	adds.w	r0, r8, r5
 8003c0a:	eb49 0106 	adc.w	r1, r9, r6
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	461d      	mov	r5, r3
 8003c14:	f04f 0600 	mov.w	r6, #0
 8003c18:	196b      	adds	r3, r5, r5
 8003c1a:	eb46 0406 	adc.w	r4, r6, r6
 8003c1e:	461a      	mov	r2, r3
 8003c20:	4623      	mov	r3, r4
 8003c22:	f7fc fae3 	bl	80001ec <__aeabi_uldivmod>
 8003c26:	4603      	mov	r3, r0
 8003c28:	460c      	mov	r4, r1
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	4ba5      	ldr	r3, [pc, #660]	; (8003ec4 <UART_SetConfig+0x384>)
 8003c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	461d      	mov	r5, r3
 8003c3c:	f04f 0600 	mov.w	r6, #0
 8003c40:	46a9      	mov	r9, r5
 8003c42:	46b2      	mov	sl, r6
 8003c44:	eb19 0309 	adds.w	r3, r9, r9
 8003c48:	eb4a 040a 	adc.w	r4, sl, sl
 8003c4c:	4699      	mov	r9, r3
 8003c4e:	46a2      	mov	sl, r4
 8003c50:	eb19 0905 	adds.w	r9, r9, r5
 8003c54:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c58:	f04f 0100 	mov.w	r1, #0
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c6c:	4689      	mov	r9, r1
 8003c6e:	4692      	mov	sl, r2
 8003c70:	eb19 0005 	adds.w	r0, r9, r5
 8003c74:	eb4a 0106 	adc.w	r1, sl, r6
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	461d      	mov	r5, r3
 8003c7e:	f04f 0600 	mov.w	r6, #0
 8003c82:	196b      	adds	r3, r5, r5
 8003c84:	eb46 0406 	adc.w	r4, r6, r6
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4623      	mov	r3, r4
 8003c8c:	f7fc faae 	bl	80001ec <__aeabi_uldivmod>
 8003c90:	4603      	mov	r3, r0
 8003c92:	460c      	mov	r4, r1
 8003c94:	461a      	mov	r2, r3
 8003c96:	4b8b      	ldr	r3, [pc, #556]	; (8003ec4 <UART_SetConfig+0x384>)
 8003c98:	fba3 1302 	umull	r1, r3, r3, r2
 8003c9c:	095b      	lsrs	r3, r3, #5
 8003c9e:	2164      	movs	r1, #100	; 0x64
 8003ca0:	fb01 f303 	mul.w	r3, r1, r3
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	3332      	adds	r3, #50	; 0x32
 8003caa:	4a86      	ldr	r2, [pc, #536]	; (8003ec4 <UART_SetConfig+0x384>)
 8003cac:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cb8:	4498      	add	r8, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	461d      	mov	r5, r3
 8003cbe:	f04f 0600 	mov.w	r6, #0
 8003cc2:	46a9      	mov	r9, r5
 8003cc4:	46b2      	mov	sl, r6
 8003cc6:	eb19 0309 	adds.w	r3, r9, r9
 8003cca:	eb4a 040a 	adc.w	r4, sl, sl
 8003cce:	4699      	mov	r9, r3
 8003cd0:	46a2      	mov	sl, r4
 8003cd2:	eb19 0905 	adds.w	r9, r9, r5
 8003cd6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cda:	f04f 0100 	mov.w	r1, #0
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ce6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cee:	4689      	mov	r9, r1
 8003cf0:	4692      	mov	sl, r2
 8003cf2:	eb19 0005 	adds.w	r0, r9, r5
 8003cf6:	eb4a 0106 	adc.w	r1, sl, r6
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	461d      	mov	r5, r3
 8003d00:	f04f 0600 	mov.w	r6, #0
 8003d04:	196b      	adds	r3, r5, r5
 8003d06:	eb46 0406 	adc.w	r4, r6, r6
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4623      	mov	r3, r4
 8003d0e:	f7fc fa6d 	bl	80001ec <__aeabi_uldivmod>
 8003d12:	4603      	mov	r3, r0
 8003d14:	460c      	mov	r4, r1
 8003d16:	461a      	mov	r2, r3
 8003d18:	4b6a      	ldr	r3, [pc, #424]	; (8003ec4 <UART_SetConfig+0x384>)
 8003d1a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	2164      	movs	r1, #100	; 0x64
 8003d22:	fb01 f303 	mul.w	r3, r1, r3
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	3332      	adds	r3, #50	; 0x32
 8003d2c:	4a65      	ldr	r2, [pc, #404]	; (8003ec4 <UART_SetConfig+0x384>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	f003 0207 	and.w	r2, r3, #7
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4442      	add	r2, r8
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	e26f      	b.n	8004222 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d42:	f7ff fda5 	bl	8003890 <HAL_RCC_GetPCLK1Freq>
 8003d46:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	461d      	mov	r5, r3
 8003d4c:	f04f 0600 	mov.w	r6, #0
 8003d50:	46a8      	mov	r8, r5
 8003d52:	46b1      	mov	r9, r6
 8003d54:	eb18 0308 	adds.w	r3, r8, r8
 8003d58:	eb49 0409 	adc.w	r4, r9, r9
 8003d5c:	4698      	mov	r8, r3
 8003d5e:	46a1      	mov	r9, r4
 8003d60:	eb18 0805 	adds.w	r8, r8, r5
 8003d64:	eb49 0906 	adc.w	r9, r9, r6
 8003d68:	f04f 0100 	mov.w	r1, #0
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d74:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d78:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d7c:	4688      	mov	r8, r1
 8003d7e:	4691      	mov	r9, r2
 8003d80:	eb18 0005 	adds.w	r0, r8, r5
 8003d84:	eb49 0106 	adc.w	r1, r9, r6
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	461d      	mov	r5, r3
 8003d8e:	f04f 0600 	mov.w	r6, #0
 8003d92:	196b      	adds	r3, r5, r5
 8003d94:	eb46 0406 	adc.w	r4, r6, r6
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4623      	mov	r3, r4
 8003d9c:	f7fc fa26 	bl	80001ec <__aeabi_uldivmod>
 8003da0:	4603      	mov	r3, r0
 8003da2:	460c      	mov	r4, r1
 8003da4:	461a      	mov	r2, r3
 8003da6:	4b47      	ldr	r3, [pc, #284]	; (8003ec4 <UART_SetConfig+0x384>)
 8003da8:	fba3 2302 	umull	r2, r3, r3, r2
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	461d      	mov	r5, r3
 8003db6:	f04f 0600 	mov.w	r6, #0
 8003dba:	46a9      	mov	r9, r5
 8003dbc:	46b2      	mov	sl, r6
 8003dbe:	eb19 0309 	adds.w	r3, r9, r9
 8003dc2:	eb4a 040a 	adc.w	r4, sl, sl
 8003dc6:	4699      	mov	r9, r3
 8003dc8:	46a2      	mov	sl, r4
 8003dca:	eb19 0905 	adds.w	r9, r9, r5
 8003dce:	eb4a 0a06 	adc.w	sl, sl, r6
 8003dd2:	f04f 0100 	mov.w	r1, #0
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003de2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003de6:	4689      	mov	r9, r1
 8003de8:	4692      	mov	sl, r2
 8003dea:	eb19 0005 	adds.w	r0, r9, r5
 8003dee:	eb4a 0106 	adc.w	r1, sl, r6
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	461d      	mov	r5, r3
 8003df8:	f04f 0600 	mov.w	r6, #0
 8003dfc:	196b      	adds	r3, r5, r5
 8003dfe:	eb46 0406 	adc.w	r4, r6, r6
 8003e02:	461a      	mov	r2, r3
 8003e04:	4623      	mov	r3, r4
 8003e06:	f7fc f9f1 	bl	80001ec <__aeabi_uldivmod>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	461a      	mov	r2, r3
 8003e10:	4b2c      	ldr	r3, [pc, #176]	; (8003ec4 <UART_SetConfig+0x384>)
 8003e12:	fba3 1302 	umull	r1, r3, r3, r2
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	2164      	movs	r1, #100	; 0x64
 8003e1a:	fb01 f303 	mul.w	r3, r1, r3
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	3332      	adds	r3, #50	; 0x32
 8003e24:	4a27      	ldr	r2, [pc, #156]	; (8003ec4 <UART_SetConfig+0x384>)
 8003e26:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e32:	4498      	add	r8, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	461d      	mov	r5, r3
 8003e38:	f04f 0600 	mov.w	r6, #0
 8003e3c:	46a9      	mov	r9, r5
 8003e3e:	46b2      	mov	sl, r6
 8003e40:	eb19 0309 	adds.w	r3, r9, r9
 8003e44:	eb4a 040a 	adc.w	r4, sl, sl
 8003e48:	4699      	mov	r9, r3
 8003e4a:	46a2      	mov	sl, r4
 8003e4c:	eb19 0905 	adds.w	r9, r9, r5
 8003e50:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e54:	f04f 0100 	mov.w	r1, #0
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e68:	4689      	mov	r9, r1
 8003e6a:	4692      	mov	sl, r2
 8003e6c:	eb19 0005 	adds.w	r0, r9, r5
 8003e70:	eb4a 0106 	adc.w	r1, sl, r6
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	461d      	mov	r5, r3
 8003e7a:	f04f 0600 	mov.w	r6, #0
 8003e7e:	196b      	adds	r3, r5, r5
 8003e80:	eb46 0406 	adc.w	r4, r6, r6
 8003e84:	461a      	mov	r2, r3
 8003e86:	4623      	mov	r3, r4
 8003e88:	f7fc f9b0 	bl	80001ec <__aeabi_uldivmod>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	460c      	mov	r4, r1
 8003e90:	461a      	mov	r2, r3
 8003e92:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <UART_SetConfig+0x384>)
 8003e94:	fba3 1302 	umull	r1, r3, r3, r2
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	2164      	movs	r1, #100	; 0x64
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	3332      	adds	r3, #50	; 0x32
 8003ea6:	4a07      	ldr	r2, [pc, #28]	; (8003ec4 <UART_SetConfig+0x384>)
 8003ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eac:	095b      	lsrs	r3, r3, #5
 8003eae:	f003 0207 	and.w	r2, r3, #7
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4442      	add	r2, r8
 8003eb8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003eba:	e1b2      	b.n	8004222 <UART_SetConfig+0x6e2>
 8003ebc:	40011000 	.word	0x40011000
 8003ec0:	40011400 	.word	0x40011400
 8003ec4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4ad7      	ldr	r2, [pc, #860]	; (800422c <UART_SetConfig+0x6ec>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d005      	beq.n	8003ede <UART_SetConfig+0x39e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4ad6      	ldr	r2, [pc, #856]	; (8004230 <UART_SetConfig+0x6f0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	f040 80d1 	bne.w	8004080 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ede:	f7ff fceb 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 8003ee2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	469a      	mov	sl, r3
 8003ee8:	f04f 0b00 	mov.w	fp, #0
 8003eec:	46d0      	mov	r8, sl
 8003eee:	46d9      	mov	r9, fp
 8003ef0:	eb18 0308 	adds.w	r3, r8, r8
 8003ef4:	eb49 0409 	adc.w	r4, r9, r9
 8003ef8:	4698      	mov	r8, r3
 8003efa:	46a1      	mov	r9, r4
 8003efc:	eb18 080a 	adds.w	r8, r8, sl
 8003f00:	eb49 090b 	adc.w	r9, r9, fp
 8003f04:	f04f 0100 	mov.w	r1, #0
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f10:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f18:	4688      	mov	r8, r1
 8003f1a:	4691      	mov	r9, r2
 8003f1c:	eb1a 0508 	adds.w	r5, sl, r8
 8003f20:	eb4b 0609 	adc.w	r6, fp, r9
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	f04f 0400 	mov.w	r4, #0
 8003f36:	0094      	lsls	r4, r2, #2
 8003f38:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f3c:	008b      	lsls	r3, r1, #2
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4623      	mov	r3, r4
 8003f42:	4628      	mov	r0, r5
 8003f44:	4631      	mov	r1, r6
 8003f46:	f7fc f951 	bl	80001ec <__aeabi_uldivmod>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	460c      	mov	r4, r1
 8003f4e:	461a      	mov	r2, r3
 8003f50:	4bb8      	ldr	r3, [pc, #736]	; (8004234 <UART_SetConfig+0x6f4>)
 8003f52:	fba3 2302 	umull	r2, r3, r3, r2
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	469b      	mov	fp, r3
 8003f60:	f04f 0c00 	mov.w	ip, #0
 8003f64:	46d9      	mov	r9, fp
 8003f66:	46e2      	mov	sl, ip
 8003f68:	eb19 0309 	adds.w	r3, r9, r9
 8003f6c:	eb4a 040a 	adc.w	r4, sl, sl
 8003f70:	4699      	mov	r9, r3
 8003f72:	46a2      	mov	sl, r4
 8003f74:	eb19 090b 	adds.w	r9, r9, fp
 8003f78:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f7c:	f04f 0100 	mov.w	r1, #0
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f90:	4689      	mov	r9, r1
 8003f92:	4692      	mov	sl, r2
 8003f94:	eb1b 0509 	adds.w	r5, fp, r9
 8003f98:	eb4c 060a 	adc.w	r6, ip, sl
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	f04f 0400 	mov.w	r4, #0
 8003fae:	0094      	lsls	r4, r2, #2
 8003fb0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fb4:	008b      	lsls	r3, r1, #2
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4623      	mov	r3, r4
 8003fba:	4628      	mov	r0, r5
 8003fbc:	4631      	mov	r1, r6
 8003fbe:	f7fc f915 	bl	80001ec <__aeabi_uldivmod>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	460c      	mov	r4, r1
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4b9a      	ldr	r3, [pc, #616]	; (8004234 <UART_SetConfig+0x6f4>)
 8003fca:	fba3 1302 	umull	r1, r3, r3, r2
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	2164      	movs	r1, #100	; 0x64
 8003fd2:	fb01 f303 	mul.w	r3, r1, r3
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	3332      	adds	r3, #50	; 0x32
 8003fdc:	4a95      	ldr	r2, [pc, #596]	; (8004234 <UART_SetConfig+0x6f4>)
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fe8:	4498      	add	r8, r3
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	469b      	mov	fp, r3
 8003fee:	f04f 0c00 	mov.w	ip, #0
 8003ff2:	46d9      	mov	r9, fp
 8003ff4:	46e2      	mov	sl, ip
 8003ff6:	eb19 0309 	adds.w	r3, r9, r9
 8003ffa:	eb4a 040a 	adc.w	r4, sl, sl
 8003ffe:	4699      	mov	r9, r3
 8004000:	46a2      	mov	sl, r4
 8004002:	eb19 090b 	adds.w	r9, r9, fp
 8004006:	eb4a 0a0c 	adc.w	sl, sl, ip
 800400a:	f04f 0100 	mov.w	r1, #0
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004016:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800401a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800401e:	4689      	mov	r9, r1
 8004020:	4692      	mov	sl, r2
 8004022:	eb1b 0509 	adds.w	r5, fp, r9
 8004026:	eb4c 060a 	adc.w	r6, ip, sl
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	4619      	mov	r1, r3
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	f04f 0400 	mov.w	r4, #0
 800403c:	0094      	lsls	r4, r2, #2
 800403e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004042:	008b      	lsls	r3, r1, #2
 8004044:	461a      	mov	r2, r3
 8004046:	4623      	mov	r3, r4
 8004048:	4628      	mov	r0, r5
 800404a:	4631      	mov	r1, r6
 800404c:	f7fc f8ce 	bl	80001ec <__aeabi_uldivmod>
 8004050:	4603      	mov	r3, r0
 8004052:	460c      	mov	r4, r1
 8004054:	461a      	mov	r2, r3
 8004056:	4b77      	ldr	r3, [pc, #476]	; (8004234 <UART_SetConfig+0x6f4>)
 8004058:	fba3 1302 	umull	r1, r3, r3, r2
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	2164      	movs	r1, #100	; 0x64
 8004060:	fb01 f303 	mul.w	r3, r1, r3
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	3332      	adds	r3, #50	; 0x32
 800406a:	4a72      	ldr	r2, [pc, #456]	; (8004234 <UART_SetConfig+0x6f4>)
 800406c:	fba2 2303 	umull	r2, r3, r2, r3
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	f003 020f 	and.w	r2, r3, #15
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4442      	add	r2, r8
 800407c:	609a      	str	r2, [r3, #8]
 800407e:	e0d0      	b.n	8004222 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004080:	f7ff fc06 	bl	8003890 <HAL_RCC_GetPCLK1Freq>
 8004084:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	469a      	mov	sl, r3
 800408a:	f04f 0b00 	mov.w	fp, #0
 800408e:	46d0      	mov	r8, sl
 8004090:	46d9      	mov	r9, fp
 8004092:	eb18 0308 	adds.w	r3, r8, r8
 8004096:	eb49 0409 	adc.w	r4, r9, r9
 800409a:	4698      	mov	r8, r3
 800409c:	46a1      	mov	r9, r4
 800409e:	eb18 080a 	adds.w	r8, r8, sl
 80040a2:	eb49 090b 	adc.w	r9, r9, fp
 80040a6:	f04f 0100 	mov.w	r1, #0
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040ba:	4688      	mov	r8, r1
 80040bc:	4691      	mov	r9, r2
 80040be:	eb1a 0508 	adds.w	r5, sl, r8
 80040c2:	eb4b 0609 	adc.w	r6, fp, r9
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	4619      	mov	r1, r3
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	f04f 0400 	mov.w	r4, #0
 80040d8:	0094      	lsls	r4, r2, #2
 80040da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040de:	008b      	lsls	r3, r1, #2
 80040e0:	461a      	mov	r2, r3
 80040e2:	4623      	mov	r3, r4
 80040e4:	4628      	mov	r0, r5
 80040e6:	4631      	mov	r1, r6
 80040e8:	f7fc f880 	bl	80001ec <__aeabi_uldivmod>
 80040ec:	4603      	mov	r3, r0
 80040ee:	460c      	mov	r4, r1
 80040f0:	461a      	mov	r2, r3
 80040f2:	4b50      	ldr	r3, [pc, #320]	; (8004234 <UART_SetConfig+0x6f4>)
 80040f4:	fba3 2302 	umull	r2, r3, r3, r2
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	469b      	mov	fp, r3
 8004102:	f04f 0c00 	mov.w	ip, #0
 8004106:	46d9      	mov	r9, fp
 8004108:	46e2      	mov	sl, ip
 800410a:	eb19 0309 	adds.w	r3, r9, r9
 800410e:	eb4a 040a 	adc.w	r4, sl, sl
 8004112:	4699      	mov	r9, r3
 8004114:	46a2      	mov	sl, r4
 8004116:	eb19 090b 	adds.w	r9, r9, fp
 800411a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800411e:	f04f 0100 	mov.w	r1, #0
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800412a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800412e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004132:	4689      	mov	r9, r1
 8004134:	4692      	mov	sl, r2
 8004136:	eb1b 0509 	adds.w	r5, fp, r9
 800413a:	eb4c 060a 	adc.w	r6, ip, sl
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	4619      	mov	r1, r3
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	f04f 0400 	mov.w	r4, #0
 8004150:	0094      	lsls	r4, r2, #2
 8004152:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004156:	008b      	lsls	r3, r1, #2
 8004158:	461a      	mov	r2, r3
 800415a:	4623      	mov	r3, r4
 800415c:	4628      	mov	r0, r5
 800415e:	4631      	mov	r1, r6
 8004160:	f7fc f844 	bl	80001ec <__aeabi_uldivmod>
 8004164:	4603      	mov	r3, r0
 8004166:	460c      	mov	r4, r1
 8004168:	461a      	mov	r2, r3
 800416a:	4b32      	ldr	r3, [pc, #200]	; (8004234 <UART_SetConfig+0x6f4>)
 800416c:	fba3 1302 	umull	r1, r3, r3, r2
 8004170:	095b      	lsrs	r3, r3, #5
 8004172:	2164      	movs	r1, #100	; 0x64
 8004174:	fb01 f303 	mul.w	r3, r1, r3
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	3332      	adds	r3, #50	; 0x32
 800417e:	4a2d      	ldr	r2, [pc, #180]	; (8004234 <UART_SetConfig+0x6f4>)
 8004180:	fba2 2303 	umull	r2, r3, r2, r3
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800418a:	4498      	add	r8, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	469b      	mov	fp, r3
 8004190:	f04f 0c00 	mov.w	ip, #0
 8004194:	46d9      	mov	r9, fp
 8004196:	46e2      	mov	sl, ip
 8004198:	eb19 0309 	adds.w	r3, r9, r9
 800419c:	eb4a 040a 	adc.w	r4, sl, sl
 80041a0:	4699      	mov	r9, r3
 80041a2:	46a2      	mov	sl, r4
 80041a4:	eb19 090b 	adds.w	r9, r9, fp
 80041a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041ac:	f04f 0100 	mov.w	r1, #0
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041c0:	4689      	mov	r9, r1
 80041c2:	4692      	mov	sl, r2
 80041c4:	eb1b 0509 	adds.w	r5, fp, r9
 80041c8:	eb4c 060a 	adc.w	r6, ip, sl
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	4619      	mov	r1, r3
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	f04f 0300 	mov.w	r3, #0
 80041da:	f04f 0400 	mov.w	r4, #0
 80041de:	0094      	lsls	r4, r2, #2
 80041e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041e4:	008b      	lsls	r3, r1, #2
 80041e6:	461a      	mov	r2, r3
 80041e8:	4623      	mov	r3, r4
 80041ea:	4628      	mov	r0, r5
 80041ec:	4631      	mov	r1, r6
 80041ee:	f7fb fffd 	bl	80001ec <__aeabi_uldivmod>
 80041f2:	4603      	mov	r3, r0
 80041f4:	460c      	mov	r4, r1
 80041f6:	461a      	mov	r2, r3
 80041f8:	4b0e      	ldr	r3, [pc, #56]	; (8004234 <UART_SetConfig+0x6f4>)
 80041fa:	fba3 1302 	umull	r1, r3, r3, r2
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2164      	movs	r1, #100	; 0x64
 8004202:	fb01 f303 	mul.w	r3, r1, r3
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	3332      	adds	r3, #50	; 0x32
 800420c:	4a09      	ldr	r2, [pc, #36]	; (8004234 <UART_SetConfig+0x6f4>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	f003 020f 	and.w	r2, r3, #15
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4442      	add	r2, r8
 800421e:	609a      	str	r2, [r3, #8]
}
 8004220:	e7ff      	b.n	8004222 <UART_SetConfig+0x6e2>
 8004222:	bf00      	nop
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800422c:	40011000 	.word	0x40011000
 8004230:	40011400 	.word	0x40011400
 8004234:	51eb851f 	.word	0x51eb851f

08004238 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f043 0201 	orr.w	r2, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f023 0201 	bic.w	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	019b      	lsls	r3, r3, #6
 800428e:	f043 0220 	orr.w	r2, r3, #32
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3301      	adds	r3, #1
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4a09      	ldr	r2, [pc, #36]	; (80042c4 <USB_FlushTxFifo+0x48>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d901      	bls.n	80042a8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e006      	b.n	80042b6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d0f0      	beq.n	8004296 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	00030d40 	.word	0x00030d40

080042c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2210      	movs	r2, #16
 80042d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3301      	adds	r3, #1
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4a09      	ldr	r2, [pc, #36]	; (8004308 <USB_FlushRxFifo+0x40>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d901      	bls.n	80042ec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e006      	b.n	80042fa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d0f0      	beq.n	80042da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	00030d40 	.word	0x00030d40

0800430c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800430c:	b480      	push	{r7}
 800430e:	b089      	sub	sp, #36	; 0x24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	4613      	mov	r3, r2
 8004318:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004322:	88fb      	ldrh	r3, [r7, #6]
 8004324:	3303      	adds	r3, #3
 8004326:	089b      	lsrs	r3, r3, #2
 8004328:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	e00b      	b.n	8004348 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	601a      	str	r2, [r3, #0]
    pDest++;
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	3304      	adds	r3, #4
 8004340:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	3301      	adds	r3, #1
 8004346:	61bb      	str	r3, [r7, #24]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	429a      	cmp	r2, r3
 800434e:	d3ef      	bcc.n	8004330 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004350:	69fb      	ldr	r3, [r7, #28]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3724      	adds	r7, #36	; 0x24
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800435e:	b480      	push	{r7}
 8004360:	b085      	sub	sp, #20
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4013      	ands	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004376:	68fb      	ldr	r3, [r7, #12]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	f003 0301 	and.w	r3, r3, #1
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80043be:	f023 0303 	bic.w	r3, r3, #3
 80043c2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	68f9      	ldr	r1, [r7, #12]
 80043d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80043d8:	4313      	orrs	r3, r2
 80043da:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80043dc:	78fb      	ldrb	r3, [r7, #3]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d107      	bne.n	80043f2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043e8:	461a      	mov	r2, r3
 80043ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80043ee:	6053      	str	r3, [r2, #4]
 80043f0:	e009      	b.n	8004406 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d106      	bne.n	8004406 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043fe:	461a      	mov	r2, r3
 8004400:	f241 7370 	movw	r3, #6000	; 0x1770
 8004404:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004438:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d109      	bne.n	8004458 <USB_DriveVbus+0x44>
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d106      	bne.n	8004458 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004452:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004456:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800445e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004462:	d109      	bne.n	8004478 <USB_DriveVbus+0x64>
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004476:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004486:	b480      	push	{r7}
 8004488:	b085      	sub	sp, #20
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	b29b      	uxth	r3, r3
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	0c9b      	lsrs	r3, r3, #18
 80044d0:	f003 0303 	and.w	r3, r3, #3
 80044d4:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <USB_HC_Halt+0x3a>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d16c      	bne.n	80045bc <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	0151      	lsls	r1, r2, #5
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	440a      	add	r2, r1
 80044f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004500:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d143      	bne.n	8004596 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4413      	add	r3, r2
 8004516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	0151      	lsls	r1, r2, #5
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	440a      	add	r2, r1
 8004524:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004528:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800452c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	4413      	add	r3, r2
 8004536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	0151      	lsls	r1, r2, #5
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	440a      	add	r2, r1
 8004544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004548:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800454c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4413      	add	r3, r2
 8004556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	0151      	lsls	r1, r2, #5
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	440a      	add	r2, r1
 8004564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004568:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800456c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	3301      	adds	r3, #1
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800457a:	d81d      	bhi.n	80045b8 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4413      	add	r3, r2
 8004584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800458e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004592:	d0ec      	beq.n	800456e <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004594:	e080      	b.n	8004698 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	4413      	add	r3, r2
 800459e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	0151      	lsls	r1, r2, #5
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	440a      	add	r2, r1
 80045ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045b4:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80045b6:	e06f      	b.n	8004698 <USB_HC_Halt+0x1f0>
          break;
 80045b8:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80045ba:	e06d      	b.n	8004698 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	0151      	lsls	r1, r2, #5
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	440a      	add	r2, r1
 80045d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045da:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d143      	bne.n	8004674 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	0151      	lsls	r1, r2, #5
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	440a      	add	r2, r1
 8004602:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004606:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800460a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	4413      	add	r3, r2
 8004614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	0151      	lsls	r1, r2, #5
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	440a      	add	r2, r1
 8004622:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004626:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800462a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4413      	add	r3, r2
 8004634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	0151      	lsls	r1, r2, #5
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	440a      	add	r2, r1
 8004642:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004646:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800464a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	3301      	adds	r3, #1
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004658:	d81d      	bhi.n	8004696 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	4413      	add	r3, r2
 8004662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800466c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004670:	d0ec      	beq.n	800464c <USB_HC_Halt+0x1a4>
 8004672:	e011      	b.n	8004698 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4413      	add	r3, r2
 800467c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	0151      	lsls	r1, r2, #5
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	440a      	add	r2, r1
 800468a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800468e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	e000      	b.n	8004698 <USB_HC_Halt+0x1f0>
          break;
 8004696:	bf00      	nop
    }
  }

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b086      	sub	sp, #24
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7ff fdcf 	bl	800425a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80046bc:	2110      	movs	r1, #16
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff fddc 	bl	800427c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff fdff 	bl	80042c8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80046ca:	2300      	movs	r3, #0
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	e01f      	b.n	8004710 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046e6:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046ee:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046f6:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004704:	461a      	mov	r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	3301      	adds	r3, #1
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2b0f      	cmp	r3, #15
 8004714:	d9dc      	bls.n	80046d0 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004716:	2300      	movs	r3, #0
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	e034      	b.n	8004786 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004732:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800473a:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004742:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4413      	add	r3, r2
 800474c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004750:	461a      	mov	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	3301      	adds	r3, #1
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004762:	d80c      	bhi.n	800477e <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4413      	add	r3, r2
 800476c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800477a:	d0ec      	beq.n	8004756 <USB_StopHost+0xb0>
 800477c:	e000      	b.n	8004780 <USB_StopHost+0xda>
        break;
 800477e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	3301      	adds	r3, #1
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	2b0f      	cmp	r3, #15
 800478a:	d9c7      	bls.n	800471c <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004792:	461a      	mov	r2, r3
 8004794:	f04f 33ff 	mov.w	r3, #4294967295
 8004798:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f04f 32ff 	mov.w	r2, #4294967295
 80047a0:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff fd48 	bl	8004238 <USB_EnableGlobalInt>

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <TM_GPIO_InitAlternate>:
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b086      	sub	sp, #24
 80047b6:	af02      	add	r7, sp, #8
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	4608      	mov	r0, r1
 80047bc:	4611      	mov	r1, r2
 80047be:	461a      	mov	r2, r3
 80047c0:	4603      	mov	r3, r0
 80047c2:	807b      	strh	r3, [r7, #2]
 80047c4:	460b      	mov	r3, r1
 80047c6:	707b      	strb	r3, [r7, #1]
 80047c8:	4613      	mov	r3, r2
 80047ca:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 80047cc:	887b      	ldrh	r3, [r7, #2]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d03f      	beq.n	8004852 <TM_GPIO_InitAlternate+0xa0>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f852 	bl	800487c <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80047d8:	2300      	movs	r3, #0
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	e02a      	b.n	8004834 <TM_GPIO_InitAlternate+0x82>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80047de:	887a      	ldrh	r2, [r7, #2]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	fa42 f303 	asr.w	r3, r2, r3
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d01e      	beq.n	800482c <TM_GPIO_InitAlternate+0x7a>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	08da      	lsrs	r2, r3, #3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3208      	adds	r2, #8
 80047f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	f002 0207 	and.w	r2, r2, #7
 8004800:	0092      	lsls	r2, r2, #2
 8004802:	210f      	movs	r1, #15
 8004804:	fa01 f202 	lsl.w	r2, r1, r2
 8004808:	43d2      	mvns	r2, r2
 800480a:	4013      	ands	r3, r2
 800480c:	7f39      	ldrb	r1, [r7, #28]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	f002 0207 	and.w	r2, r2, #7
 8004814:	0092      	lsls	r2, r2, #2
 8004816:	fa01 f202 	lsl.w	r2, r1, r2
 800481a:	4611      	mov	r1, r2
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	08d2      	lsrs	r2, r2, #3
 8004820:	4319      	orrs	r1, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3208      	adds	r2, #8
 8004826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800482a:	e000      	b.n	800482e <TM_GPIO_InitAlternate+0x7c>
			continue;
 800482c:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3301      	adds	r3, #1
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b0f      	cmp	r3, #15
 8004838:	d9d1      	bls.n	80047de <TM_GPIO_InitAlternate+0x2c>
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 800483a:	787a      	ldrb	r2, [r7, #1]
 800483c:	8879      	ldrh	r1, [r7, #2]
 800483e:	7e3b      	ldrb	r3, [r7, #24]
 8004840:	9301      	str	r3, [sp, #4]
 8004842:	783b      	ldrb	r3, [r7, #0]
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	4613      	mov	r3, r2
 8004848:	2202      	movs	r2, #2
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f82e 	bl	80048ac <TM_GPIO_INT_Init>
 8004850:	e000      	b.n	8004854 <TM_GPIO_InitAlternate+0xa2>
		return;
 8004852:	bf00      	nop
}
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8004868:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800486c:	0a9b      	lsrs	r3, r3, #10
 800486e:	b29b      	uxth	r3, r3
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff ffe8 	bl	800485a <TM_GPIO_GetPortSource>
 800488a:	4603      	mov	r3, r0
 800488c:	461a      	mov	r2, r3
 800488e:	2301      	movs	r3, #1
 8004890:	fa03 f202 	lsl.w	r2, r3, r2
 8004894:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <TM_GPIO_INT_EnableClock+0x2c>)
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	4611      	mov	r1, r2
 800489a:	4a03      	ldr	r2, [pc, #12]	; (80048a8 <TM_GPIO_INT_EnableClock+0x2c>)
 800489c:	430b      	orrs	r3, r1
 800489e:	6313      	str	r3, [r2, #48]	; 0x30
#endif
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40023800 	.word	0x40023800

080048ac <TM_GPIO_INT_Init>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	4608      	mov	r0, r1
 80048b6:	4611      	mov	r1, r2
 80048b8:	461a      	mov	r2, r3
 80048ba:	4603      	mov	r3, r0
 80048bc:	807b      	strh	r3, [r7, #2]
 80048be:	460b      	mov	r3, r1
 80048c0:	707b      	strb	r3, [r7, #1]
 80048c2:	4613      	mov	r3, r2
 80048c4:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7ff ffc7 	bl	800485a <TM_GPIO_GetPortSource>
 80048cc:	4603      	mov	r3, r0
 80048ce:	73bb      	strb	r3, [r7, #14]
		GPIO_Speed = TM_GPIO_Speed_High;
	}
#endif
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80048d0:	2300      	movs	r3, #0
 80048d2:	73fb      	strb	r3, [r7, #15]
 80048d4:	e067      	b.n	80049a6 <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80048d6:	887a      	ldrh	r2, [r7, #2]
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	fa42 f303 	asr.w	r3, r2, r3
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d05b      	beq.n	800499e <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 80048e6:	7bbb      	ldrb	r3, [r7, #14]
 80048e8:	4a32      	ldr	r2, [pc, #200]	; (80049b4 <TM_GPIO_INT_Init+0x108>)
 80048ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048ee:	b21a      	sxth	r2, r3
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	2101      	movs	r1, #1
 80048f4:	fa01 f303 	lsl.w	r3, r1, r3
 80048f8:	b21b      	sxth	r3, r3
 80048fa:	4313      	orrs	r3, r2
 80048fc:	b21a      	sxth	r2, r3
 80048fe:	7bbb      	ldrb	r3, [r7, #14]
 8004900:	b291      	uxth	r1, r2
 8004902:	4a2c      	ldr	r2, [pc, #176]	; (80049b4 <TM_GPIO_INT_Init+0x108>)
 8004904:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	7bfa      	ldrb	r2, [r7, #15]
 800490e:	0052      	lsls	r2, r2, #1
 8004910:	2103      	movs	r1, #3
 8004912:	fa01 f202 	lsl.w	r2, r1, r2
 8004916:	43d2      	mvns	r2, r2
 8004918:	4013      	ands	r3, r2
 800491a:	7e39      	ldrb	r1, [r7, #24]
 800491c:	7bfa      	ldrb	r2, [r7, #15]
 800491e:	0052      	lsls	r2, r2, #1
 8004920:	fa01 f202 	lsl.w	r2, r1, r2
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	7bfb      	ldrb	r3, [r7, #15]
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	2103      	movs	r1, #3
 8004934:	fa01 f303 	lsl.w	r3, r1, r3
 8004938:	43db      	mvns	r3, r3
 800493a:	4013      	ands	r3, r2
 800493c:	7879      	ldrb	r1, [r7, #1]
 800493e:	7bfa      	ldrb	r2, [r7, #15]
 8004940:	0052      	lsls	r2, r2, #1
 8004942:	fa01 f202 	lsl.w	r2, r1, r2
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 800494c:	787b      	ldrb	r3, [r7, #1]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d002      	beq.n	8004958 <TM_GPIO_INT_Init+0xac>
 8004952:	787b      	ldrb	r3, [r7, #1]
 8004954:	2b02      	cmp	r3, #2
 8004956:	d123      	bne.n	80049a0 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	7bfa      	ldrb	r2, [r7, #15]
 800495e:	2101      	movs	r1, #1
 8004960:	fa01 f202 	lsl.w	r2, r1, r2
 8004964:	b292      	uxth	r2, r2
 8004966:	43d2      	mvns	r2, r2
 8004968:	4013      	ands	r3, r2
 800496a:	7839      	ldrb	r1, [r7, #0]
 800496c:	7bfa      	ldrb	r2, [r7, #15]
 800496e:	fa01 f202 	lsl.w	r2, r1, r2
 8004972:	b292      	uxth	r2, r2
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	2103      	movs	r1, #3
 8004984:	fa01 f303 	lsl.w	r3, r1, r3
 8004988:	43db      	mvns	r3, r3
 800498a:	4013      	ands	r3, r2
 800498c:	7f39      	ldrb	r1, [r7, #28]
 800498e:	7bfa      	ldrb	r2, [r7, #15]
 8004990:	0052      	lsls	r2, r2, #1
 8004992:	fa01 f202 	lsl.w	r2, r1, r2
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	609a      	str	r2, [r3, #8]
 800499c:	e000      	b.n	80049a0 <TM_GPIO_INT_Init+0xf4>
			continue;
 800499e:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	3301      	adds	r3, #1
 80049a4:	73fb      	strb	r3, [r7, #15]
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	2b0f      	cmp	r3, #15
 80049aa:	d994      	bls.n	80048d6 <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 80049ac:	bf00      	nop
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20000254 	.word	0x20000254

080049b8 <TM_I2C_GetHandle>:
#endif
#ifdef I2C4
static void TM_I2C4_INT_InitPins(TM_I2C_PinsPack_t pinspack);
#endif

I2C_HandleTypeDef* TM_I2C_GetHandle(I2C_TypeDef* I2Cx) {
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
#ifdef I2C1
	if (I2Cx == I2C1) {
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a0c      	ldr	r2, [pc, #48]	; (80049f4 <TM_I2C_GetHandle+0x3c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d101      	bne.n	80049cc <TM_I2C_GetHandle+0x14>
		return &I2C1Handle;
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <TM_I2C_GetHandle+0x40>)
 80049ca:	e00c      	b.n	80049e6 <TM_I2C_GetHandle+0x2e>
	}
#endif
#ifdef I2C2
	if (I2Cx == I2C2) {
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a0b      	ldr	r2, [pc, #44]	; (80049fc <TM_I2C_GetHandle+0x44>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d101      	bne.n	80049d8 <TM_I2C_GetHandle+0x20>
		return &I2C2Handle;
 80049d4:	4b0a      	ldr	r3, [pc, #40]	; (8004a00 <TM_I2C_GetHandle+0x48>)
 80049d6:	e006      	b.n	80049e6 <TM_I2C_GetHandle+0x2e>
	}
#endif
#ifdef I2C3
	if (I2Cx == I2C3) {
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a0a      	ldr	r2, [pc, #40]	; (8004a04 <TM_I2C_GetHandle+0x4c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d101      	bne.n	80049e4 <TM_I2C_GetHandle+0x2c>
		return &I2C3Handle;
 80049e0:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <TM_I2C_GetHandle+0x50>)
 80049e2:	e000      	b.n	80049e6 <TM_I2C_GetHandle+0x2e>
		return &I2C4Handle;
	}
#endif
	
	/* Return invalid */
	return 0;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	40005400 	.word	0x40005400
 80049f8:	20000008 	.word	0x20000008
 80049fc:	40005800 	.word	0x40005800
 8004a00:	2000005c 	.word	0x2000005c
 8004a04:	40005c00 	.word	0x40005c00
 8004a08:	200000b0 	.word	0x200000b0

08004a0c <TM_I2C_FillSettings>:

static void TM_I2C_FillSettings(I2C_HandleTypeDef* Handle, uint32_t clockSpeed) {
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
	/* 100kHz @ 48MHz APB clock */
	uint32_t I2C_Timing = 0x10805E89;
#endif

	/* Fill settings */
	Handle->Init.OwnAddress2 = 0x00;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	619a      	str	r2, [r3, #24]
	Handle->Init.OwnAddress1 = 0x00;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	60da      	str	r2, [r3, #12]
	Handle->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a28:	611a      	str	r2, [r3, #16]
	Handle->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	615a      	str	r2, [r3, #20]
	Handle->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	61da      	str	r2, [r3, #28]
	Handle->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE; 
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	621a      	str	r2, [r3, #32]
#if defined(STM32F7xx) || defined(STM32F0xx)
	Handle->Init.Timing = I2C_Timing;
#else
	Handle->Init.ClockSpeed = clockSpeed;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	605a      	str	r2, [r3, #4]
	Handle->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	609a      	str	r2, [r3, #8]
#endif
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <TM_I2C_Init>:

TM_I2C_Result_t TM_I2C_Init(I2C_TypeDef* I2Cx, TM_I2C_PinsPack_t pinspack, uint32_t clockSpeed) {	
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f7ff ffa8 	bl	80049b8 <TM_I2C_GetHandle>
 8004a68:	61f8      	str	r0, [r7, #28]
	
	/* Fill instance value */
	Handle->Instance = I2Cx;
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	601a      	str	r2, [r3, #0]
	
#ifdef I2C1
	if (I2Cx == I2C1) {
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4a26      	ldr	r2, [pc, #152]	; (8004b0c <TM_I2C_Init+0xb8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d111      	bne.n	8004a9c <TM_I2C_Init+0x48>
		/* Enable clock */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8004a78:	2300      	movs	r3, #0
 8004a7a:	61bb      	str	r3, [r7, #24]
 8004a7c:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <TM_I2C_Init+0xbc>)
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	4a23      	ldr	r2, [pc, #140]	; (8004b10 <TM_I2C_Init+0xbc>)
 8004a82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a86:	6413      	str	r3, [r2, #64]	; 0x40
 8004a88:	4b21      	ldr	r3, [pc, #132]	; (8004b10 <TM_I2C_Init+0xbc>)
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a90:	61bb      	str	r3, [r7, #24]
 8004a92:	69bb      	ldr	r3, [r7, #24]
		
		/* Enable pins */
		TM_I2C1_INT_InitPins(pinspack);
 8004a94:	7afb      	ldrb	r3, [r7, #11]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 f904 	bl	8004ca4 <TM_I2C1_INT_InitPins>
	}
#endif
#ifdef I2C2	
	if (I2Cx == I2C2) {
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a1d      	ldr	r2, [pc, #116]	; (8004b14 <TM_I2C_Init+0xc0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d111      	bne.n	8004ac8 <TM_I2C_Init+0x74>
		/* Enable clock */
		__HAL_RCC_I2C2_CLK_ENABLE();
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	4b19      	ldr	r3, [pc, #100]	; (8004b10 <TM_I2C_Init+0xbc>)
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	4a18      	ldr	r2, [pc, #96]	; (8004b10 <TM_I2C_Init+0xbc>)
 8004aae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ab4:	4b16      	ldr	r3, [pc, #88]	; (8004b10 <TM_I2C_Init+0xbc>)
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	697b      	ldr	r3, [r7, #20]
		
		/* Enable pins */
		TM_I2C2_INT_InitPins(pinspack);
 8004ac0:	7afb      	ldrb	r3, [r7, #11]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 f92c 	bl	8004d20 <TM_I2C2_INT_InitPins>
	} 
#endif
#ifdef I2C3
	if (I2Cx == I2C3) {
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <TM_I2C_Init+0xc4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d111      	bne.n	8004af4 <TM_I2C_Init+0xa0>
		/* Enable clock */
		__HAL_RCC_I2C3_CLK_ENABLE();
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	613b      	str	r3, [r7, #16]
 8004ad4:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <TM_I2C_Init+0xbc>)
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	4a0d      	ldr	r2, [pc, #52]	; (8004b10 <TM_I2C_Init+0xbc>)
 8004ada:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ade:	6413      	str	r3, [r2, #64]	; 0x40
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <TM_I2C_Init+0xbc>)
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	693b      	ldr	r3, [r7, #16]
		
		/* Enable pins */
		TM_I2C3_INT_InitPins(pinspack);
 8004aec:	7afb      	ldrb	r3, [r7, #11]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f956 	bl	8004da0 <TM_I2C3_INT_InitPins>
		TM_I2C4_INT_InitPins(pinspack);
	}
#endif
	
	/* Fill settings */
	TM_I2C_FillSettings(Handle, clockSpeed);
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	69f8      	ldr	r0, [r7, #28]
 8004af8:	f7ff ff88 	bl	8004a0c <TM_I2C_FillSettings>
	
	/* Initialize I2C */
	HAL_I2C_Init(Handle);
 8004afc:	69f8      	ldr	r0, [r7, #28]
 8004afe:	f7fd f9cb 	bl	8001e98 <HAL_I2C_Init>
#if defined(I2C_ANALOGFILTER_ENABLE)
	HAL_I2CEx_ConfigAnalogFilter(Handle, I2C_ANALOGFILTER_ENABLE);
#endif
	
	/* Return OK */
	return TM_I2C_Result_Ok;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3720      	adds	r7, #32
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40005400 	.word	0x40005400
 8004b10:	40023800 	.word	0x40023800
 8004b14:	40005800 	.word	0x40005800
 8004b18:	40005c00 	.word	0x40005c00

08004b1c <TM_I2C_Read>:

TM_I2C_Result_t TM_I2C_Read(I2C_TypeDef* I2Cx, uint8_t device_address, uint8_t register_address, uint8_t* data) {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	607b      	str	r3, [r7, #4]
 8004b26:	460b      	mov	r3, r1
 8004b28:	72fb      	strb	r3, [r7, #11]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	72bb      	strb	r3, [r7, #10]
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f7ff ff42 	bl	80049b8 <TM_I2C_GetHandle>
 8004b34:	6178      	str	r0, [r7, #20]
	
	/* Send address */
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8004b36:	7afb      	ldrb	r3, [r7, #11]
 8004b38:	b299      	uxth	r1, r3
 8004b3a:	f107 020a 	add.w	r2, r7, #10
 8004b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	2301      	movs	r3, #1
 8004b46:	6978      	ldr	r0, [r7, #20]
 8004b48:	f7fd fade 	bl	8002108 <HAL_I2C_Master_Transmit>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d004      	beq.n	8004b5c <TM_I2C_Read+0x40>
		/* Check error */
		if (HAL_I2C_GetError(Handle) != HAL_I2C_ERROR_AF) {
 8004b52:	6978      	ldr	r0, [r7, #20]
 8004b54:	f7fd ff2a 	bl	80029ac <HAL_I2C_GetError>
			
		}
		
		/* Return error */
		return TM_I2C_Result_Error;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e012      	b.n	8004b82 <TM_I2C_Read+0x66>
	}
	
	/* Receive multiple byte */
	if (HAL_I2C_Master_Receive(Handle, device_address, data, 1, 1000) != HAL_OK) {
 8004b5c:	7afb      	ldrb	r3, [r7, #11]
 8004b5e:	b299      	uxth	r1, r3
 8004b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	2301      	movs	r3, #1
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6978      	ldr	r0, [r7, #20]
 8004b6c:	f7fd fbca 	bl	8002304 <HAL_I2C_Master_Receive>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d004      	beq.n	8004b80 <TM_I2C_Read+0x64>
		/* Check error */
		if (HAL_I2C_GetError(Handle) != HAL_I2C_ERROR_AF) {
 8004b76:	6978      	ldr	r0, [r7, #20]
 8004b78:	f7fd ff18 	bl	80029ac <HAL_I2C_GetError>
			
		}
		
		/* Return error */
		return TM_I2C_Result_Error;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <TM_I2C_Read+0x66>
	}
	
	/* Return OK */
	return TM_I2C_Result_Ok;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <TM_I2C_ReadMulti>:

TM_I2C_Result_t TM_I2C_ReadMulti(I2C_TypeDef* I2Cx, uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b088      	sub	sp, #32
 8004b8e:	af02      	add	r7, sp, #8
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	607b      	str	r3, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	72fb      	strb	r3, [r7, #11]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	72bb      	strb	r3, [r7, #10]
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f7ff ff0b 	bl	80049b8 <TM_I2C_GetHandle>
 8004ba2:	6178      	str	r0, [r7, #20]
	
	/* Send register address */
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8004ba4:	7afb      	ldrb	r3, [r7, #11]
 8004ba6:	b299      	uxth	r1, r3
 8004ba8:	f107 020a 	add.w	r2, r7, #10
 8004bac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	6978      	ldr	r0, [r7, #20]
 8004bb6:	f7fd faa7 	bl	8002108 <HAL_I2C_Master_Transmit>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d004      	beq.n	8004bca <TM_I2C_ReadMulti+0x40>
		/* Check error */
		if (HAL_I2C_GetError(Handle) != HAL_I2C_ERROR_AF) {
 8004bc0:	6978      	ldr	r0, [r7, #20]
 8004bc2:	f7fd fef3 	bl	80029ac <HAL_I2C_GetError>
			
		}
		
		/* Return error */
		return TM_I2C_Result_Error;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e013      	b.n	8004bf2 <TM_I2C_ReadMulti+0x68>
	}
	
	/* Receive multiple byte */
	if (HAL_I2C_Master_Receive(Handle, device_address, data, count, 1000) != HAL_OK) {
 8004bca:	7afb      	ldrb	r3, [r7, #11]
 8004bcc:	b299      	uxth	r1, r3
 8004bce:	8c3a      	ldrh	r2, [r7, #32]
 8004bd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6978      	ldr	r0, [r7, #20]
 8004bdc:	f7fd fb92 	bl	8002304 <HAL_I2C_Master_Receive>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d004      	beq.n	8004bf0 <TM_I2C_ReadMulti+0x66>
		/* Check error */
		if (HAL_I2C_GetError(Handle) != HAL_I2C_ERROR_AF) {
 8004be6:	6978      	ldr	r0, [r7, #20]
 8004be8:	f7fd fee0 	bl	80029ac <HAL_I2C_GetError>
			
		}
		
		/* Return error */
		return TM_I2C_Result_Error;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e000      	b.n	8004bf2 <TM_I2C_ReadMulti+0x68>
	}
	
	/* Return OK */
	return TM_I2C_Result_Ok;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <TM_I2C_Write>:
	
	/* Return OK */
	return TM_I2C_Result_Ok;
}

TM_I2C_Result_t TM_I2C_Write(I2C_TypeDef* I2Cx, uint8_t device_address, uint8_t register_address, uint8_t data) {
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b086      	sub	sp, #24
 8004bfe:	af02      	add	r7, sp, #8
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	4608      	mov	r0, r1
 8004c04:	4611      	mov	r1, r2
 8004c06:	461a      	mov	r2, r3
 8004c08:	4603      	mov	r3, r0
 8004c0a:	70fb      	strb	r3, [r7, #3]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	70bb      	strb	r3, [r7, #2]
 8004c10:	4613      	mov	r3, r2
 8004c12:	707b      	strb	r3, [r7, #1]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff fecf 	bl	80049b8 <TM_I2C_GetHandle>
 8004c1a:	60f8      	str	r0, [r7, #12]
		
	/* Format array to send */
	d[0] = register_address;
 8004c1c:	78bb      	ldrb	r3, [r7, #2]
 8004c1e:	723b      	strb	r3, [r7, #8]
	d[1] = data;
 8004c20:	787b      	ldrb	r3, [r7, #1]
 8004c22:	727b      	strb	r3, [r7, #9]
	
	/* Try to transmit via I2C */
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t)device_address, (uint8_t *)d, 2, 1000) != HAL_OK) {
 8004c24:	78fb      	ldrb	r3, [r7, #3]
 8004c26:	b299      	uxth	r1, r3
 8004c28:	f107 0208 	add.w	r2, r7, #8
 8004c2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	2302      	movs	r3, #2
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f7fd fa67 	bl	8002108 <HAL_I2C_Master_Transmit>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d004      	beq.n	8004c4a <TM_I2C_Write+0x50>
		/* Check error */
		if (HAL_I2C_GetError(Handle) != HAL_I2C_ERROR_AF) {
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f7fd feb3 	bl	80029ac <HAL_I2C_GetError>
			
		}
		
		/* Return error */
		return TM_I2C_Result_Error;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <TM_I2C_Write+0x52>
	} 
	
	/* Return OK */
	return TM_I2C_Result_Ok;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <TM_I2C_IsDeviceConnected>:
	
	/* Return OK */
	return TM_I2C_Result_Ok;
}

TM_I2C_Result_t TM_I2C_IsDeviceConnected(I2C_TypeDef* I2Cx, uint8_t device_address) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	70fb      	strb	r3, [r7, #3]
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7ff fea9 	bl	80049b8 <TM_I2C_GetHandle>
 8004c66:	60f8      	str	r0, [r7, #12]
	
	/* Check if device is ready for communication */
	if (HAL_I2C_IsDeviceReady(Handle, device_address, 2, 5) != HAL_OK) {
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	b299      	uxth	r1, r3
 8004c6c:	2305      	movs	r3, #5
 8004c6e:	2202      	movs	r2, #2
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f7fd fd6d 	bl	8002750 <HAL_I2C_IsDeviceReady>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <TM_I2C_IsDeviceConnected+0x2c>
		/* Return error */
		return TM_I2C_Result_Error;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <TM_I2C_IsDeviceConnected+0x2e>
	}
	
	/* Return OK */
	return TM_I2C_Result_Ok;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <TM_I2C_InitCustomPinsCallback>:
	
	/* Return OK */
	return TM_I2C_Result_Ok;
}

__weak void TM_I2C_InitCustomPinsCallback(I2C_TypeDef* I2Cx, uint16_t AlternateFunction) {
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	460b      	mov	r3, r1
 8004c94:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
	...

08004ca4 <TM_I2C1_INT_InitPins>:

/* Private functions */
#ifdef I2C1
static void TM_I2C1_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	4603      	mov	r3, r0
 8004cac:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 8004cae:	79fb      	ldrb	r3, [r7, #7]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d109      	bne.n	8004cc8 <TM_I2C1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C1);
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	9301      	str	r3, [sp, #4]
 8004cb8:	2301      	movs	r3, #1
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	21c0      	movs	r1, #192	; 0xc0
 8004cc2:	4815      	ldr	r0, [pc, #84]	; (8004d18 <TM_I2C1_INT_InitPins+0x74>)
 8004cc4:	f7ff fd75 	bl	80047b2 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_2) {
 8004cc8:	79fb      	ldrb	r3, [r7, #7]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d10a      	bne.n	8004ce4 <TM_I2C1_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C1);
 8004cce:	2304      	movs	r3, #4
 8004cd0:	9301      	str	r3, [sp, #4]
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004cde:	480e      	ldr	r0, [pc, #56]	; (8004d18 <TM_I2C1_INT_InitPins+0x74>)
 8004ce0:	f7ff fd67 	bl	80047b2 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_3) {
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d10a      	bne.n	8004d00 <TM_I2C1_INT_InitPins+0x5c>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C1);
 8004cea:	2304      	movs	r3, #4
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	2301      	movs	r3, #1
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004cfa:	4807      	ldr	r0, [pc, #28]	; (8004d18 <TM_I2C1_INT_InitPins+0x74>)
 8004cfc:	f7ff fd59 	bl	80047b2 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 8004d00:	79fb      	ldrb	r3, [r7, #7]
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d103      	bne.n	8004d0e <TM_I2C1_INT_InitPins+0x6a>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C1, GPIO_AF4_I2C1);
 8004d06:	2104      	movs	r1, #4
 8004d08:	4804      	ldr	r0, [pc, #16]	; (8004d1c <TM_I2C1_INT_InitPins+0x78>)
 8004d0a:	f7ff ffbe 	bl	8004c8a <TM_I2C_InitCustomPinsCallback>
	}
}
 8004d0e:	bf00      	nop
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40020400 	.word	0x40020400
 8004d1c:	40005400 	.word	0x40005400

08004d20 <TM_I2C2_INT_InitPins>:
#endif
#ifdef I2C2
static void TM_I2C2_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	4603      	mov	r3, r0
 8004d28:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 8004d2a:	79fb      	ldrb	r3, [r7, #7]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <TM_I2C2_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10 | GPIO_PIN_11, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C2);
 8004d30:	2304      	movs	r3, #4
 8004d32:	9301      	str	r3, [sp, #4]
 8004d34:	2301      	movs	r3, #1
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	2301      	movs	r3, #1
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8004d40:	4813      	ldr	r0, [pc, #76]	; (8004d90 <TM_I2C2_INT_InitPins+0x70>)
 8004d42:	f7ff fd36 	bl	80047b2 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF)
	if (pinspack == TM_I2C_PinsPack_2) {
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d109      	bne.n	8004d60 <TM_I2C2_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C2);
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	9301      	str	r3, [sp, #4]
 8004d50:	2301      	movs	r3, #1
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	2301      	movs	r3, #1
 8004d56:	2201      	movs	r2, #1
 8004d58:	2103      	movs	r1, #3
 8004d5a:	480e      	ldr	r0, [pc, #56]	; (8004d94 <TM_I2C2_INT_InitPins+0x74>)
 8004d5c:	f7ff fd29 	bl	80047b2 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_3) {
 8004d60:	79fb      	ldrb	r3, [r7, #7]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d109      	bne.n	8004d7a <TM_I2C2_INT_InitPins+0x5a>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C2);
 8004d66:	2304      	movs	r3, #4
 8004d68:	9301      	str	r3, [sp, #4]
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	2301      	movs	r3, #1
 8004d70:	2201      	movs	r2, #1
 8004d72:	2130      	movs	r1, #48	; 0x30
 8004d74:	4808      	ldr	r0, [pc, #32]	; (8004d98 <TM_I2C2_INT_InitPins+0x78>)
 8004d76:	f7ff fd1c 	bl	80047b2 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d103      	bne.n	8004d88 <TM_I2C2_INT_InitPins+0x68>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C2, GPIO_AF4_I2C2);
 8004d80:	2104      	movs	r1, #4
 8004d82:	4806      	ldr	r0, [pc, #24]	; (8004d9c <TM_I2C2_INT_InitPins+0x7c>)
 8004d84:	f7ff ff81 	bl	8004c8a <TM_I2C_InitCustomPinsCallback>
	}
}
 8004d88:	bf00      	nop
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40020400 	.word	0x40020400
 8004d94:	40021400 	.word	0x40021400
 8004d98:	40021c00 	.word	0x40021c00
 8004d9c:	40005800 	.word	0x40005800

08004da0 <TM_I2C3_INT_InitPins>:
#endif
#ifdef I2C3
static void TM_I2C3_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af02      	add	r7, sp, #8
 8004da6:	4603      	mov	r3, r0
 8004da8:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOA) && defined(GPIOC)
	if (pinspack == TM_I2C_PinsPack_1) {
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d115      	bne.n	8004ddc <TM_I2C3_INT_InitPins+0x3c>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C3);
 8004db0:	2304      	movs	r3, #4
 8004db2:	9301      	str	r3, [sp, #4]
 8004db4:	2301      	movs	r3, #1
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	2301      	movs	r3, #1
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dc0:	4813      	ldr	r0, [pc, #76]	; (8004e10 <TM_I2C3_INT_InitPins+0x70>)
 8004dc2:	f7ff fcf6 	bl	80047b2 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C3);
 8004dc6:	2304      	movs	r3, #4
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	2301      	movs	r3, #1
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	2301      	movs	r3, #1
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004dd6:	480f      	ldr	r0, [pc, #60]	; (8004e14 <TM_I2C3_INT_InitPins+0x74>)
 8004dd8:	f7ff fceb 	bl	80047b2 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_2) {
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d10a      	bne.n	8004df8 <TM_I2C3_INT_InitPins+0x58>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_7 | GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C3);
 8004de2:	2304      	movs	r3, #4
 8004de4:	9301      	str	r3, [sp, #4]
 8004de6:	2301      	movs	r3, #1
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	2301      	movs	r3, #1
 8004dec:	2201      	movs	r2, #1
 8004dee:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8004df2:	4809      	ldr	r0, [pc, #36]	; (8004e18 <TM_I2C3_INT_InitPins+0x78>)
 8004df4:	f7ff fcdd 	bl	80047b2 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 8004df8:	79fb      	ldrb	r3, [r7, #7]
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d103      	bne.n	8004e06 <TM_I2C3_INT_InitPins+0x66>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C3, GPIO_AF4_I2C3);
 8004dfe:	2104      	movs	r1, #4
 8004e00:	4806      	ldr	r0, [pc, #24]	; (8004e1c <TM_I2C3_INT_InitPins+0x7c>)
 8004e02:	f7ff ff42 	bl	8004c8a <TM_I2C_InitCustomPinsCallback>
	}
}
 8004e06:	bf00      	nop
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	40020000 	.word	0x40020000
 8004e14:	40020800 	.word	0x40020800
 8004e18:	40021c00 	.word	0x40021c00
 8004e1c:	40005c00 	.word	0x40005c00

08004e20 <TM_MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)


TM_MPU6050_Result_t TM_MPU6050_Init(TM_MPU6050_t* DataStruct, TM_MPU6050_Device_t DeviceNumber, TM_MPU6050_Accelerometer_t AccelerometerSensitivity, TM_MPU6050_Gyroscope_t GyroscopeSensitivity) {
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	4608      	mov	r0, r1
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4603      	mov	r3, r0
 8004e30:	70fb      	strb	r3, [r7, #3]
 8004e32:	460b      	mov	r3, r1
 8004e34:	70bb      	strb	r3, [r7, #2]
 8004e36:	4613      	mov	r3, r2
 8004e38:	707b      	strb	r3, [r7, #1]
	uint8_t temp;
	
	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8004e3a:	78fb      	ldrb	r3, [r7, #3]
 8004e3c:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	701a      	strb	r2, [r3, #0]
	
	/* Initialize I2C */
	TM_I2C_Init(MPU6050_I2C, MPU6050_I2C_PINSPACK, MPU6050_I2C_CLOCK);
 8004e46:	4a1b      	ldr	r2, [pc, #108]	; (8004eb4 <TM_MPU6050_Init+0x94>)
 8004e48:	2100      	movs	r1, #0
 8004e4a:	481b      	ldr	r0, [pc, #108]	; (8004eb8 <TM_MPU6050_Init+0x98>)
 8004e4c:	f7ff fe02 	bl	8004a54 <TM_I2C_Init>
	
	/* Check if device is connected */
	if (TM_I2C_IsDeviceConnected(MPU6050_I2C, DataStruct->Address) != TM_I2C_Result_Ok) {
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	4619      	mov	r1, r3
 8004e56:	4818      	ldr	r0, [pc, #96]	; (8004eb8 <TM_MPU6050_Init+0x98>)
 8004e58:	f7ff fefc 	bl	8004c54 <TM_I2C_IsDeviceConnected>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <TM_MPU6050_Init+0x46>
		/* Return error */
		return TM_MPU6050_Result_DeviceNotConnected;
 8004e62:	2302      	movs	r3, #2
 8004e64:	e022      	b.n	8004eac <TM_MPU6050_Init+0x8c>
	}
	
	/* Check who am I */
	TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_WHO_AM_I, &temp);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	7819      	ldrb	r1, [r3, #0]
 8004e6a:	f107 030f 	add.w	r3, r7, #15
 8004e6e:	2275      	movs	r2, #117	; 0x75
 8004e70:	4811      	ldr	r0, [pc, #68]	; (8004eb8 <TM_MPU6050_Init+0x98>)
 8004e72:	f7ff fe53 	bl	8004b1c <TM_I2C_Read>
	if (temp != MPU6050_I_AM) {
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
 8004e78:	2b68      	cmp	r3, #104	; 0x68
 8004e7a:	d001      	beq.n	8004e80 <TM_MPU6050_Init+0x60>
		/* Return error */
		return TM_MPU6050_Result_DeviceInvalid;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e015      	b.n	8004eac <TM_MPU6050_Init+0x8c>
	}
	
	/* Wakeup MPU6050 */
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_PWR_MGMT_1, 0x00);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	7819      	ldrb	r1, [r3, #0]
 8004e84:	2300      	movs	r3, #0
 8004e86:	226b      	movs	r2, #107	; 0x6b
 8004e88:	480b      	ldr	r0, [pc, #44]	; (8004eb8 <TM_MPU6050_Init+0x98>)
 8004e8a:	f7ff feb6 	bl	8004bfa <TM_I2C_Write>
	
	/* Set sample rate to 1kHz */
	TM_MPU6050_SetDataRate(DataStruct, TM_MPU6050_DataRate_1KHz);
 8004e8e:	2107      	movs	r1, #7
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f8af 	bl	8004ff4 <TM_MPU6050_SetDataRate>
	
	/* Config accelerometer */
	TM_MPU6050_SetAccelerometer(DataStruct, AccelerometerSensitivity);
 8004e96:	78bb      	ldrb	r3, [r7, #2]
 8004e98:	4619      	mov	r1, r3
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f85e 	bl	8004f5c <TM_MPU6050_SetAccelerometer>
	
	/* Config accelerometer */
	TM_MPU6050_SetGyroscope(DataStruct, GyroscopeSensitivity);
 8004ea0:	787b      	ldrb	r3, [r7, #1]
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f809 	bl	8004ebc <TM_MPU6050_SetGyroscope>
	
	/* Return OK */
	return TM_MPU6050_Result_Ok;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	00061a80 	.word	0x00061a80
 8004eb8:	40005400 	.word	0x40005400

08004ebc <TM_MPU6050_SetGyroscope>:

TM_MPU6050_Result_t TM_MPU6050_SetGyroscope(TM_MPU6050_t* DataStruct, TM_MPU6050_Gyroscope_t GyroscopeSensitivity) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	70fb      	strb	r3, [r7, #3]
	uint8_t temp;
	
	/* Config gyroscope */
	TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_GYRO_CONFIG, &temp);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	7819      	ldrb	r1, [r3, #0]
 8004ecc:	f107 030f 	add.w	r3, r7, #15
 8004ed0:	221b      	movs	r2, #27
 8004ed2:	481d      	ldr	r0, [pc, #116]	; (8004f48 <TM_MPU6050_SetGyroscope+0x8c>)
 8004ed4:	f7ff fe22 	bl	8004b1c <TM_I2C_Read>
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	b25b      	sxtb	r3, r3
 8004edc:	f023 0318 	bic.w	r3, r3, #24
 8004ee0:	b25a      	sxtb	r2, r3
 8004ee2:	78fb      	ldrb	r3, [r7, #3]
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	b25b      	sxtb	r3, r3
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	b25b      	sxtb	r3, r3
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	73fb      	strb	r3, [r7, #15]
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_GYRO_CONFIG, temp);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	7819      	ldrb	r1, [r3, #0]
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
 8004ef6:	221b      	movs	r2, #27
 8004ef8:	4813      	ldr	r0, [pc, #76]	; (8004f48 <TM_MPU6050_SetGyroscope+0x8c>)
 8004efa:	f7ff fe7e 	bl	8004bfa <TM_I2C_Write>
	
	switch (GyroscopeSensitivity) {
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d81a      	bhi.n	8004f3a <TM_MPU6050_SetGyroscope+0x7e>
 8004f04:	a201      	add	r2, pc, #4	; (adr r2, 8004f0c <TM_MPU6050_SetGyroscope+0x50>)
 8004f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0a:	bf00      	nop
 8004f0c:	08004f1d 	.word	0x08004f1d
 8004f10:	08004f25 	.word	0x08004f25
 8004f14:	08004f2d 	.word	0x08004f2d
 8004f18:	08004f35 	.word	0x08004f35
		case TM_MPU6050_Gyroscope_250s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250; 
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a0b      	ldr	r2, [pc, #44]	; (8004f4c <TM_MPU6050_SetGyroscope+0x90>)
 8004f20:	605a      	str	r2, [r3, #4]
			break;
 8004f22:	e00b      	b.n	8004f3c <TM_MPU6050_SetGyroscope+0x80>
		case TM_MPU6050_Gyroscope_500s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500; 
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a0a      	ldr	r2, [pc, #40]	; (8004f50 <TM_MPU6050_SetGyroscope+0x94>)
 8004f28:	605a      	str	r2, [r3, #4]
			break;
 8004f2a:	e007      	b.n	8004f3c <TM_MPU6050_SetGyroscope+0x80>
		case TM_MPU6050_Gyroscope_1000s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000; 
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a09      	ldr	r2, [pc, #36]	; (8004f54 <TM_MPU6050_SetGyroscope+0x98>)
 8004f30:	605a      	str	r2, [r3, #4]
			break;
 8004f32:	e003      	b.n	8004f3c <TM_MPU6050_SetGyroscope+0x80>
		case TM_MPU6050_Gyroscope_2000s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000; 
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a08      	ldr	r2, [pc, #32]	; (8004f58 <TM_MPU6050_SetGyroscope+0x9c>)
 8004f38:	605a      	str	r2, [r3, #4]
		default:
			break;
 8004f3a:	bf00      	nop
	}
	
	/* Return OK */
	return TM_MPU6050_Result_Ok;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	40005400 	.word	0x40005400
 8004f4c:	3bfa232d 	.word	0x3bfa232d
 8004f50:	3c7a232d 	.word	0x3c7a232d
 8004f54:	3cf9c190 	.word	0x3cf9c190
 8004f58:	3d79c190 	.word	0x3d79c190

08004f5c <TM_MPU6050_SetAccelerometer>:

TM_MPU6050_Result_t TM_MPU6050_SetAccelerometer(TM_MPU6050_t* DataStruct, TM_MPU6050_Accelerometer_t AccelerometerSensitivity) {
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	70fb      	strb	r3, [r7, #3]
	uint8_t temp;
	
	/* Config accelerometer */
	TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_CONFIG, &temp);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	7819      	ldrb	r1, [r3, #0]
 8004f6c:	f107 030f 	add.w	r3, r7, #15
 8004f70:	221c      	movs	r2, #28
 8004f72:	481f      	ldr	r0, [pc, #124]	; (8004ff0 <TM_MPU6050_SetAccelerometer+0x94>)
 8004f74:	f7ff fdd2 	bl	8004b1c <TM_I2C_Read>
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	b25b      	sxtb	r3, r3
 8004f7c:	f023 0318 	bic.w	r3, r3, #24
 8004f80:	b25a      	sxtb	r2, r3
 8004f82:	78fb      	ldrb	r3, [r7, #3]
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	b25b      	sxtb	r3, r3
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	b25b      	sxtb	r3, r3
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	73fb      	strb	r3, [r7, #15]
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_CONFIG, temp);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	7819      	ldrb	r1, [r3, #0]
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	221c      	movs	r2, #28
 8004f98:	4815      	ldr	r0, [pc, #84]	; (8004ff0 <TM_MPU6050_SetAccelerometer+0x94>)
 8004f9a:	f7ff fe2e 	bl	8004bfa <TM_I2C_Write>
	
	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8004f9e:	78fb      	ldrb	r3, [r7, #3]
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d81e      	bhi.n	8004fe2 <TM_MPU6050_SetAccelerometer+0x86>
 8004fa4:	a201      	add	r2, pc, #4	; (adr r2, 8004fac <TM_MPU6050_SetAccelerometer+0x50>)
 8004fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004faa:	bf00      	nop
 8004fac:	08004fbd 	.word	0x08004fbd
 8004fb0:	08004fc7 	.word	0x08004fc7
 8004fb4:	08004fd1 	.word	0x08004fd1
 8004fb8:	08004fdb 	.word	0x08004fdb
		case TM_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2; 
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8004fc2:	609a      	str	r2, [r3, #8]
			break;
 8004fc4:	e00e      	b.n	8004fe4 <TM_MPU6050_SetAccelerometer+0x88>
		case TM_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4; 
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8004fcc:	609a      	str	r2, [r3, #8]
			break;
 8004fce:	e009      	b.n	8004fe4 <TM_MPU6050_SetAccelerometer+0x88>
		case TM_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8; 
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8004fd6:	609a      	str	r2, [r3, #8]
			break;
 8004fd8:	e004      	b.n	8004fe4 <TM_MPU6050_SetAccelerometer+0x88>
		case TM_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16; 
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8004fe0:	609a      	str	r2, [r3, #8]
		default:
			break;
 8004fe2:	bf00      	nop
	}
	
	/* Return OK */
	return TM_MPU6050_Result_Ok;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40005400 	.word	0x40005400

08004ff4 <TM_MPU6050_SetDataRate>:

TM_MPU6050_Result_t TM_MPU6050_SetDataRate(TM_MPU6050_t* DataStruct, uint8_t rate) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	70fb      	strb	r3, [r7, #3]
	/* Set data sample rate */
	if (TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_SMPLRT_DIV, rate) != TM_I2C_Result_Ok) {
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	7819      	ldrb	r1, [r3, #0]
 8005004:	78fb      	ldrb	r3, [r7, #3]
 8005006:	2219      	movs	r2, #25
 8005008:	4806      	ldr	r0, [pc, #24]	; (8005024 <TM_MPU6050_SetDataRate+0x30>)
 800500a:	f7ff fdf6 	bl	8004bfa <TM_I2C_Write>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <TM_MPU6050_SetDataRate+0x24>
		/* Return error */
		return TM_MPU6050_Result_Error;
 8005014:	2301      	movs	r3, #1
 8005016:	e000      	b.n	800501a <TM_MPU6050_SetDataRate+0x26>
	}
	
	/* Return OK */
	return TM_MPU6050_Result_Ok;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40005400 	.word	0x40005400

08005028 <TM_MPU6050_ReadAccelerometer>:
	
	/* Return OK */
	return TM_MPU6050_Result_Ok;
}

TM_MPU6050_Result_t TM_MPU6050_ReadAccelerometer(TM_MPU6050_t* DataStruct) {
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af02      	add	r7, sp, #8
 800502e:	6078      	str	r0, [r7, #4]
	uint8_t data[6];
	
	/* Read accelerometer data */
	TM_I2C_ReadMulti(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_XOUT_H, data, 6);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	7819      	ldrb	r1, [r3, #0]
 8005034:	f107 0208 	add.w	r2, r7, #8
 8005038:	2306      	movs	r3, #6
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	4613      	mov	r3, r2
 800503e:	223b      	movs	r2, #59	; 0x3b
 8005040:	4811      	ldr	r0, [pc, #68]	; (8005088 <TM_MPU6050_ReadAccelerometer+0x60>)
 8005042:	f7ff fda2 	bl	8004b8a <TM_I2C_ReadMulti>
	
	/* Format */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);	
 8005046:	7a3b      	ldrb	r3, [r7, #8]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	b21a      	sxth	r2, r3
 800504c:	7a7b      	ldrb	r3, [r7, #9]
 800504e:	b21b      	sxth	r3, r3
 8005050:	4313      	orrs	r3, r2
 8005052:	b21a      	sxth	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 8005058:	7abb      	ldrb	r3, [r7, #10]
 800505a:	021b      	lsls	r3, r3, #8
 800505c:	b21a      	sxth	r2, r3
 800505e:	7afb      	ldrb	r3, [r7, #11]
 8005060:	b21b      	sxth	r3, r3
 8005062:	4313      	orrs	r3, r2
 8005064:	b21a      	sxth	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 800506a:	7b3b      	ldrb	r3, [r7, #12]
 800506c:	021b      	lsls	r3, r3, #8
 800506e:	b21a      	sxth	r2, r3
 8005070:	7b7b      	ldrb	r3, [r7, #13]
 8005072:	b21b      	sxth	r3, r3
 8005074:	4313      	orrs	r3, r2
 8005076:	b21a      	sxth	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	821a      	strh	r2, [r3, #16]
	
	/* Return OK */
	return TM_MPU6050_Result_Ok;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40005400 	.word	0x40005400

0800508c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f804 	bl	80050b0 <USBH_HandleSof>
}
 80050a8:	bf00      	nop
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b0b      	cmp	r3, #11
 80050c0:	d10a      	bne.n	80050d8 <USBH_HandleSof+0x28>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	4798      	blx	r3
  }
}
 80050d8:	bf00      	nop
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80050f0:	bf00      	nop
}
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800510c:	bf00      	nop
}
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10f      	bne.n	800514a <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00e      	beq.n	800515a <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005142:	2104      	movs	r1, #4
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	4798      	blx	r3
 8005148:	e007      	b.n	800515a <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005150:	2b01      	cmp	r3, #1
 8005152:	d102      	bne.n	800515a <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fcaa 	bl	8005ac6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	791b      	ldrb	r3, [r3, #4]
 8005176:	4619      	mov	r1, r3
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f820 	bl	80051be <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	795b      	ldrb	r3, [r3, #5]
 8005182:	4619      	mov	r1, r3
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f81a 	bl	80051be <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80051a2:	2105      	movs	r1, #5
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fc71 	bl	8005a90 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2203      	movs	r2, #3
 80051b2:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	460b      	mov	r3, r1
 80051c8:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80051ca:	78fb      	ldrb	r3, [r7, #3]
 80051cc:	2b0a      	cmp	r3, #10
 80051ce:	d80b      	bhi.n	80051e8 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80051d0:	78fa      	ldrb	r2, [r7, #3]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	32e0      	adds	r2, #224	; 0xe0
 80051d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051da:	78fa      	ldrb	r2, [r7, #3]
 80051dc:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	32e0      	adds	r2, #224	; 0xe0
 80051e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
	...

080051f8 <main>:
          * @brief  The application entry point.
          *
          * @retval None
          */
        int main(void)
        {
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
          /* USER CODE END 1 */

          /* MCU Configuration----------------------------------------------------------*/

          /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
          HAL_Init();
 80051fe:	f7fb f975 	bl	80004ec <HAL_Init>
          /* USER CODE BEGIN Init */

          /* USER CODE END Init */

          /* Configure the system clock */
          SystemClock_Config();
 8005202:	f000 f9e3 	bl	80055cc <SystemClock_Config>
          /* USER CODE BEGIN SysInit */

          /* USER CODE END SysInit */

          /* Initialize all configured peripherals */
          MX_GPIO_Init();
 8005206:	f000 fabb 	bl	8005780 <MX_GPIO_Init>
          MX_I2C1_Init();
 800520a:	f000 fa57 	bl	80056bc <MX_I2C1_Init>
          MX_USART2_UART_Init();
 800520e:	f000 fa89 	bl	8005724 <MX_USART2_UART_Init>
          /* USER CODE BEGIN 2 */
//          sprintf(data,"acc value= X:%d = Y:%d = Z:%d gyro value= X:%d = Y:%d = Z:%d status = %s                                 \r",ax, ay, az, gx, gy, gz,command);
//                          HAL_UART_Transmit(&huart2, &data,strlen(data) , 1000);

             /* Initialize MPU6050 sensor 0, address = 0xD0, AD0 pin on sensor is low */
           while(TM_MPU6050_Init(&MPU6050_Sensor, TM_MPU6050_Device_0, TM_MPU6050_Accelerometer_8G, TM_MPU6050_Gyroscope_250s) != TM_MPU6050_Result_Ok)
 8005212:	bf00      	nop
 8005214:	2300      	movs	r3, #0
 8005216:	2202      	movs	r2, #2
 8005218:	2100      	movs	r1, #0
 800521a:	489b      	ldr	r0, [pc, #620]	; (8005488 <main+0x290>)
 800521c:	f7ff fe00 	bl	8004e20 <TM_MPU6050_Init>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1f6      	bne.n	8005214 <main+0x1c>
             {

             }

             HAL_Delay(5000);
 8005226:	f241 3088 	movw	r0, #5000	; 0x1388
 800522a:	f7fb f9d1 	bl	80005d0 <HAL_Delay>
             TM_MPU6050_ReadAccelerometer(&MPU6050_Sensor);
 800522e:	4896      	ldr	r0, [pc, #600]	; (8005488 <main+0x290>)
 8005230:	f7ff fefa 	bl	8005028 <TM_MPU6050_ReadAccelerometer>
             sax = MPU6050_Sensor.Accelerometer_X;
 8005234:	4b94      	ldr	r3, [pc, #592]	; (8005488 <main+0x290>)
 8005236:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800523a:	461a      	mov	r2, r3
 800523c:	4b93      	ldr	r3, [pc, #588]	; (800548c <main+0x294>)
 800523e:	601a      	str	r2, [r3, #0]
             say = MPU6050_Sensor.Accelerometer_Y;
 8005240:	4b91      	ldr	r3, [pc, #580]	; (8005488 <main+0x290>)
 8005242:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005246:	461a      	mov	r2, r3
 8005248:	4b91      	ldr	r3, [pc, #580]	; (8005490 <main+0x298>)
 800524a:	601a      	str	r2, [r3, #0]
             saz = MPU6050_Sensor.Accelerometer_Z;
 800524c:	4b8e      	ldr	r3, [pc, #568]	; (8005488 <main+0x290>)
 800524e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005252:	461a      	mov	r2, r3
 8005254:	4b8f      	ldr	r3, [pc, #572]	; (8005494 <main+0x29c>)
 8005256:	601a      	str	r2, [r3, #0]
          /* Infinite loop */
          /* USER CODE BEGIN WHILE */
          while (1)
          {

             HAL_Delay(100);
 8005258:	2064      	movs	r0, #100	; 0x64
 800525a:	f7fb f9b9 	bl	80005d0 <HAL_Delay>

             /* Read all data of mpu6050 sensor */
             //TM_MPU6050_ReadAll(&MPU6050_Sensor);
             TM_MPU6050_ReadAccelerometer(&MPU6050_Sensor);
 800525e:	488a      	ldr	r0, [pc, #552]	; (8005488 <main+0x290>)
 8005260:	f7ff fee2 	bl	8005028 <TM_MPU6050_ReadAccelerometer>
             //TM_MPU6050_ReadGyroscope(&MPU6050_Sensor);
                ax = MPU6050_Sensor.Accelerometer_X;
 8005264:	4b88      	ldr	r3, [pc, #544]	; (8005488 <main+0x290>)
 8005266:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800526a:	461a      	mov	r2, r3
 800526c:	4b8a      	ldr	r3, [pc, #552]	; (8005498 <main+0x2a0>)
 800526e:	601a      	str	r2, [r3, #0]
                ay = MPU6050_Sensor.Accelerometer_Y;
 8005270:	4b85      	ldr	r3, [pc, #532]	; (8005488 <main+0x290>)
 8005272:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005276:	461a      	mov	r2, r3
 8005278:	4b88      	ldr	r3, [pc, #544]	; (800549c <main+0x2a4>)
 800527a:	601a      	str	r2, [r3, #0]
                az = MPU6050_Sensor.Accelerometer_Z;
 800527c:	4b82      	ldr	r3, [pc, #520]	; (8005488 <main+0x290>)
 800527e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005282:	461a      	mov	r2, r3
 8005284:	4b86      	ldr	r3, [pc, #536]	; (80054a0 <main+0x2a8>)
 8005286:	601a      	str	r2, [r3, #0]
                gx = MPU6050_Sensor.Gyroscope_X;
 8005288:	4b7f      	ldr	r3, [pc, #508]	; (8005488 <main+0x290>)
 800528a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800528e:	461a      	mov	r2, r3
 8005290:	4b84      	ldr	r3, [pc, #528]	; (80054a4 <main+0x2ac>)
 8005292:	601a      	str	r2, [r3, #0]
                gy = MPU6050_Sensor.Gyroscope_Y;
 8005294:	4b7c      	ldr	r3, [pc, #496]	; (8005488 <main+0x290>)
 8005296:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800529a:	461a      	mov	r2, r3
 800529c:	4b82      	ldr	r3, [pc, #520]	; (80054a8 <main+0x2b0>)
 800529e:	601a      	str	r2, [r3, #0]
                gz = MPU6050_Sensor.Gyroscope_Z;
 80052a0:	4b79      	ldr	r3, [pc, #484]	; (8005488 <main+0x290>)
 80052a2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80052a6:	461a      	mov	r2, r3
 80052a8:	4b80      	ldr	r3, [pc, #512]	; (80054ac <main+0x2b4>)
 80052aa:	601a      	str	r2, [r3, #0]
//                sprintf(data,"acc value= X:%d = Y:%d = Z:%d gyro value= X:%d = Y:%d = Z:%d status = %s                                 \r",ax, ay, az, gx, gy, gz,command);
//                HAL_UART_Transmit(&huart2, &data,strlen(data) , 1000);

                int deltax = ax-aix;
 80052ac:	4b7a      	ldr	r3, [pc, #488]	; (8005498 <main+0x2a0>)
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	4b7f      	ldr	r3, [pc, #508]	; (80054b0 <main+0x2b8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	60bb      	str	r3, [r7, #8]
                int deltay = ay-aiy;
 80052b8:	4b78      	ldr	r3, [pc, #480]	; (800549c <main+0x2a4>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	4b7d      	ldr	r3, [pc, #500]	; (80054b4 <main+0x2bc>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	607b      	str	r3, [r7, #4]
                int deltaz = az-aiz;
 80052c4:	4b76      	ldr	r3, [pc, #472]	; (80054a0 <main+0x2a8>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	4b7b      	ldr	r3, [pc, #492]	; (80054b8 <main+0x2c0>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	603b      	str	r3, [r7, #0]
                int delta = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	60fb      	str	r3, [r7, #12]

                if(abs(deltax) > abs(deltay) /*&& abs(deltax) >abs(deltaz)*/){
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80052da:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	bfb8      	it	lt
 80052e4:	425b      	neglt	r3, r3
 80052e6:	429a      	cmp	r2, r3
 80052e8:	dd30      	ble.n	800534c <main+0x154>
                	delta = deltax;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	60fb      	str	r3, [r7, #12]
                	if(deltax >0){
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	dd15      	ble.n	8005320 <main+0x128>
                		strcpy(status[time%3],"L");
 80052f4:	4b71      	ldr	r3, [pc, #452]	; (80054bc <main+0x2c4>)
 80052f6:	6819      	ldr	r1, [r3, #0]
 80052f8:	4b71      	ldr	r3, [pc, #452]	; (80054c0 <main+0x2c8>)
 80052fa:	fb83 3201 	smull	r3, r2, r3, r1
 80052fe:	17cb      	asrs	r3, r1, #31
 8005300:	1ad2      	subs	r2, r2, r3
 8005302:	4613      	mov	r3, r2
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	4413      	add	r3, r2
 8005308:	1aca      	subs	r2, r1, r3
 800530a:	2332      	movs	r3, #50	; 0x32
 800530c:	fb03 f302 	mul.w	r3, r3, r2
 8005310:	4a6c      	ldr	r2, [pc, #432]	; (80054c4 <main+0x2cc>)
 8005312:	4413      	add	r3, r2
 8005314:	496c      	ldr	r1, [pc, #432]	; (80054c8 <main+0x2d0>)
 8005316:	461a      	mov	r2, r3
 8005318:	460b      	mov	r3, r1
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	8013      	strh	r3, [r2, #0]
 800531e:	e050      	b.n	80053c2 <main+0x1ca>
                	}
                	else strcpy(status[time%3],"R");
 8005320:	4b66      	ldr	r3, [pc, #408]	; (80054bc <main+0x2c4>)
 8005322:	6819      	ldr	r1, [r3, #0]
 8005324:	4b66      	ldr	r3, [pc, #408]	; (80054c0 <main+0x2c8>)
 8005326:	fb83 3201 	smull	r3, r2, r3, r1
 800532a:	17cb      	asrs	r3, r1, #31
 800532c:	1ad2      	subs	r2, r2, r3
 800532e:	4613      	mov	r3, r2
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	4413      	add	r3, r2
 8005334:	1aca      	subs	r2, r1, r3
 8005336:	2332      	movs	r3, #50	; 0x32
 8005338:	fb03 f302 	mul.w	r3, r3, r2
 800533c:	4a61      	ldr	r2, [pc, #388]	; (80054c4 <main+0x2cc>)
 800533e:	4413      	add	r3, r2
 8005340:	4962      	ldr	r1, [pc, #392]	; (80054cc <main+0x2d4>)
 8005342:	461a      	mov	r2, r3
 8005344:	460b      	mov	r3, r1
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	8013      	strh	r3, [r2, #0]
 800534a:	e03a      	b.n	80053c2 <main+0x1ca>
                }
                else if(abs(deltay) > abs(deltax) /*&& abs(deltay) >abs(deltaz)*/){
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8005352:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	bfb8      	it	lt
 800535c:	425b      	neglt	r3, r3
 800535e:	429a      	cmp	r2, r3
 8005360:	dd2f      	ble.n	80053c2 <main+0x1ca>
                	delta = deltay;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60fb      	str	r3, [r7, #12]
                	if(deltay >0){
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	dd15      	ble.n	8005398 <main+0x1a0>
                		strcpy(status[time%3],"F");
 800536c:	4b53      	ldr	r3, [pc, #332]	; (80054bc <main+0x2c4>)
 800536e:	6819      	ldr	r1, [r3, #0]
 8005370:	4b53      	ldr	r3, [pc, #332]	; (80054c0 <main+0x2c8>)
 8005372:	fb83 3201 	smull	r3, r2, r3, r1
 8005376:	17cb      	asrs	r3, r1, #31
 8005378:	1ad2      	subs	r2, r2, r3
 800537a:	4613      	mov	r3, r2
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	4413      	add	r3, r2
 8005380:	1aca      	subs	r2, r1, r3
 8005382:	2332      	movs	r3, #50	; 0x32
 8005384:	fb03 f302 	mul.w	r3, r3, r2
 8005388:	4a4e      	ldr	r2, [pc, #312]	; (80054c4 <main+0x2cc>)
 800538a:	4413      	add	r3, r2
 800538c:	4950      	ldr	r1, [pc, #320]	; (80054d0 <main+0x2d8>)
 800538e:	461a      	mov	r2, r3
 8005390:	460b      	mov	r3, r1
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	8013      	strh	r3, [r2, #0]
 8005396:	e014      	b.n	80053c2 <main+0x1ca>
                	}
                	else strcpy(status[time%3],"B");
 8005398:	4b48      	ldr	r3, [pc, #288]	; (80054bc <main+0x2c4>)
 800539a:	6819      	ldr	r1, [r3, #0]
 800539c:	4b48      	ldr	r3, [pc, #288]	; (80054c0 <main+0x2c8>)
 800539e:	fb83 3201 	smull	r3, r2, r3, r1
 80053a2:	17cb      	asrs	r3, r1, #31
 80053a4:	1ad2      	subs	r2, r2, r3
 80053a6:	4613      	mov	r3, r2
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	4413      	add	r3, r2
 80053ac:	1aca      	subs	r2, r1, r3
 80053ae:	2332      	movs	r3, #50	; 0x32
 80053b0:	fb03 f302 	mul.w	r3, r3, r2
 80053b4:	4a43      	ldr	r2, [pc, #268]	; (80054c4 <main+0x2cc>)
 80053b6:	4413      	add	r3, r2
 80053b8:	4946      	ldr	r1, [pc, #280]	; (80054d4 <main+0x2dc>)
 80053ba:	461a      	mov	r2, r3
 80053bc:	460b      	mov	r3, r1
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	8013      	strh	r3, [r2, #0]
////                	strcpy(status[time%3],"up");
////                }
////                else if(az-aiz<-delta){
////                	strcpy(status[time%3],"down");
////                }
                if(abs(delta)<150){
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f113 0f95 	cmn.w	r3, #149	; 0x95
 80053c8:	db18      	blt.n	80053fc <main+0x204>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2b95      	cmp	r3, #149	; 0x95
 80053ce:	dc15      	bgt.n	80053fc <main+0x204>
                	strcpy(status[time%3],"waiting");
 80053d0:	4b3a      	ldr	r3, [pc, #232]	; (80054bc <main+0x2c4>)
 80053d2:	6819      	ldr	r1, [r3, #0]
 80053d4:	4b3a      	ldr	r3, [pc, #232]	; (80054c0 <main+0x2c8>)
 80053d6:	fb83 3201 	smull	r3, r2, r3, r1
 80053da:	17cb      	asrs	r3, r1, #31
 80053dc:	1ad2      	subs	r2, r2, r3
 80053de:	4613      	mov	r3, r2
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	4413      	add	r3, r2
 80053e4:	1aca      	subs	r2, r1, r3
 80053e6:	2332      	movs	r3, #50	; 0x32
 80053e8:	fb03 f302 	mul.w	r3, r3, r2
 80053ec:	4a35      	ldr	r2, [pc, #212]	; (80054c4 <main+0x2cc>)
 80053ee:	4413      	add	r3, r2
 80053f0:	4939      	ldr	r1, [pc, #228]	; (80054d8 <main+0x2e0>)
 80053f2:	461a      	mov	r2, r3
 80053f4:	460b      	mov	r3, r1
 80053f6:	cb03      	ldmia	r3!, {r0, r1}
 80053f8:	6010      	str	r0, [r2, #0]
 80053fa:	6051      	str	r1, [r2, #4]
                }
                if(abs(sax-ax)<50 && abs(say-ay)<50){
 80053fc:	4b23      	ldr	r3, [pc, #140]	; (800548c <main+0x294>)
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	4b25      	ldr	r3, [pc, #148]	; (8005498 <main+0x2a0>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800540a:	db2a      	blt.n	8005462 <main+0x26a>
 800540c:	4b1f      	ldr	r3, [pc, #124]	; (800548c <main+0x294>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	4b21      	ldr	r3, [pc, #132]	; (8005498 <main+0x2a0>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b31      	cmp	r3, #49	; 0x31
 8005418:	dc23      	bgt.n	8005462 <main+0x26a>
 800541a:	4b1d      	ldr	r3, [pc, #116]	; (8005490 <main+0x298>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	4b1f      	ldr	r3, [pc, #124]	; (800549c <main+0x2a4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8005428:	db1b      	blt.n	8005462 <main+0x26a>
 800542a:	4b19      	ldr	r3, [pc, #100]	; (8005490 <main+0x298>)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	4b1b      	ldr	r3, [pc, #108]	; (800549c <main+0x2a4>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b31      	cmp	r3, #49	; 0x31
 8005436:	dc14      	bgt.n	8005462 <main+0x26a>
                	strcpy(status[time%3],"W");
 8005438:	4b20      	ldr	r3, [pc, #128]	; (80054bc <main+0x2c4>)
 800543a:	6819      	ldr	r1, [r3, #0]
 800543c:	4b20      	ldr	r3, [pc, #128]	; (80054c0 <main+0x2c8>)
 800543e:	fb83 3201 	smull	r3, r2, r3, r1
 8005442:	17cb      	asrs	r3, r1, #31
 8005444:	1ad2      	subs	r2, r2, r3
 8005446:	4613      	mov	r3, r2
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	4413      	add	r3, r2
 800544c:	1aca      	subs	r2, r1, r3
 800544e:	2332      	movs	r3, #50	; 0x32
 8005450:	fb03 f302 	mul.w	r3, r3, r2
 8005454:	4a1b      	ldr	r2, [pc, #108]	; (80054c4 <main+0x2cc>)
 8005456:	4413      	add	r3, r2
 8005458:	4920      	ldr	r1, [pc, #128]	; (80054dc <main+0x2e4>)
 800545a:	461a      	mov	r2, r3
 800545c:	460b      	mov	r3, r1
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	8013      	strh	r3, [r2, #0]
                }
                //sprintf(data,"X =%d : %s\n\r",ax,status[time%5]);
                /*if(status[0]==status[1] && status[1]==status[2] && status[2] == status[3] && status [3] == status[4]){
                	strcpy(command,status[0]);*/
                if (strcmp(status[0],status[1])==0 && strcmp(status[1],status[2])==0 /*&& strcmp(status[2],status[3])==0 && strcmp(status[3],status[4])==0*/) {
 8005462:	491f      	ldr	r1, [pc, #124]	; (80054e0 <main+0x2e8>)
 8005464:	4817      	ldr	r0, [pc, #92]	; (80054c4 <main+0x2cc>)
 8005466:	f7fa feaf 	bl	80001c8 <strcmp>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d13d      	bne.n	80054ec <main+0x2f4>
 8005470:	491c      	ldr	r1, [pc, #112]	; (80054e4 <main+0x2ec>)
 8005472:	481b      	ldr	r0, [pc, #108]	; (80054e0 <main+0x2e8>)
 8005474:	f7fa fea8 	bl	80001c8 <strcmp>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d136      	bne.n	80054ec <main+0x2f4>
                	strcpy(command,status[0]);
 800547e:	4911      	ldr	r1, [pc, #68]	; (80054c4 <main+0x2cc>)
 8005480:	4819      	ldr	r0, [pc, #100]	; (80054e8 <main+0x2f0>)
 8005482:	f000 fbb5 	bl	8005bf0 <strcpy>
 8005486:	e037      	b.n	80054f8 <main+0x300>
 8005488:	20000300 	.word	0x20000300
 800548c:	20000298 	.word	0x20000298
 8005490:	2000029c 	.word	0x2000029c
 8005494:	200002a0 	.word	0x200002a0
 8005498:	20000270 	.word	0x20000270
 800549c:	20000274 	.word	0x20000274
 80054a0:	20000278 	.word	0x20000278
 80054a4:	2000027c 	.word	0x2000027c
 80054a8:	20000280 	.word	0x20000280
 80054ac:	20000284 	.word	0x20000284
 80054b0:	20000288 	.word	0x20000288
 80054b4:	2000028c 	.word	0x2000028c
 80054b8:	20000290 	.word	0x20000290
 80054bc:	20000294 	.word	0x20000294
 80054c0:	55555556 	.word	0x55555556
 80054c4:	20000104 	.word	0x20000104
 80054c8:	08005c18 	.word	0x08005c18
 80054cc:	08005c1c 	.word	0x08005c1c
 80054d0:	08005c20 	.word	0x08005c20
 80054d4:	08005c24 	.word	0x08005c24
 80054d8:	08005c28 	.word	0x08005c28
 80054dc:	08005c30 	.word	0x08005c30
 80054e0:	20000136 	.word	0x20000136
 80054e4:	20000168 	.word	0x20000168
 80054e8:	20000200 	.word	0x20000200
                }
                else{
                	strcpy(command,"waiting");
 80054ec:	4b2a      	ldr	r3, [pc, #168]	; (8005598 <main+0x3a0>)
 80054ee:	4a2b      	ldr	r2, [pc, #172]	; (800559c <main+0x3a4>)
 80054f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054f4:	e883 0003 	stmia.w	r3, {r0, r1}
//                	strcpy(commandz,statusz[0]);
//                }
//                else{
//                	strcpy(commandz,"waiting");
//                }
                if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==1){
 80054f8:	2101      	movs	r1, #1
 80054fa:	4829      	ldr	r0, [pc, #164]	; (80055a0 <main+0x3a8>)
 80054fc:	f7fb fb26 	bl	8000b4c <HAL_GPIO_ReadPin>
 8005500:	4603      	mov	r3, r0
 8005502:	2b01      	cmp	r3, #1
 8005504:	d102      	bne.n	800550c <main+0x314>
                	strcpy(command,"W");
 8005506:	4b24      	ldr	r3, [pc, #144]	; (8005598 <main+0x3a0>)
 8005508:	2257      	movs	r2, #87	; 0x57
 800550a:	801a      	strh	r2, [r3, #0]
                }
                if(strcmp(command,"waiting")!=0 /*|| strcmp(commandz,"waiting")!=0)*/) {
 800550c:	4923      	ldr	r1, [pc, #140]	; (800559c <main+0x3a4>)
 800550e:	4822      	ldr	r0, [pc, #136]	; (8005598 <main+0x3a0>)
 8005510:	f7fa fe5a 	bl	80001c8 <strcmp>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d02c      	beq.n	8005574 <main+0x37c>
                    sprintf(data,"%s", command/*,commandz*/);
 800551a:	491f      	ldr	r1, [pc, #124]	; (8005598 <main+0x3a0>)
 800551c:	4821      	ldr	r0, [pc, #132]	; (80055a4 <main+0x3ac>)
 800551e:	f000 fb67 	bl	8005bf0 <strcpy>
                    if (data[0]=='W' && !sendW){
 8005522:	4b20      	ldr	r3, [pc, #128]	; (80055a4 <main+0x3ac>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b57      	cmp	r3, #87	; 0x57
 8005528:	d112      	bne.n	8005550 <main+0x358>
 800552a:	4b1f      	ldr	r3, [pc, #124]	; (80055a8 <main+0x3b0>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10e      	bne.n	8005550 <main+0x358>
                    	HAL_UART_Transmit(&huart2, &data,strlen(data) , 1000);
 8005532:	481c      	ldr	r0, [pc, #112]	; (80055a4 <main+0x3ac>)
 8005534:	f7fa fe52 	bl	80001dc <strlen>
 8005538:	4603      	mov	r3, r0
 800553a:	b29a      	uxth	r2, r3
 800553c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005540:	4918      	ldr	r1, [pc, #96]	; (80055a4 <main+0x3ac>)
 8005542:	481a      	ldr	r0, [pc, #104]	; (80055ac <main+0x3b4>)
 8005544:	f7fe fa19 	bl	800397a <HAL_UART_Transmit>
                    	sendW=1;
 8005548:	4b17      	ldr	r3, [pc, #92]	; (80055a8 <main+0x3b0>)
 800554a:	2201      	movs	r2, #1
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	e011      	b.n	8005574 <main+0x37c>
                    }else if(data[0]!='W'){
 8005550:	4b14      	ldr	r3, [pc, #80]	; (80055a4 <main+0x3ac>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b57      	cmp	r3, #87	; 0x57
 8005556:	d00d      	beq.n	8005574 <main+0x37c>
                    	sendW=0;
 8005558:	4b13      	ldr	r3, [pc, #76]	; (80055a8 <main+0x3b0>)
 800555a:	2200      	movs	r2, #0
 800555c:	601a      	str	r2, [r3, #0]
                    	HAL_UART_Transmit(&huart2, &data,strlen(data) , 1000);
 800555e:	4811      	ldr	r0, [pc, #68]	; (80055a4 <main+0x3ac>)
 8005560:	f7fa fe3c 	bl	80001dc <strlen>
 8005564:	4603      	mov	r3, r0
 8005566:	b29a      	uxth	r2, r3
 8005568:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800556c:	490d      	ldr	r1, [pc, #52]	; (80055a4 <main+0x3ac>)
 800556e:	480f      	ldr	r0, [pc, #60]	; (80055ac <main+0x3b4>)
 8005570:	f7fe fa03 	bl	800397a <HAL_UART_Transmit>
//                        HAL_UART_Transmit(&huart2, &data,strlen(data) , 1000);
//                if(strcmp(command,"waiting")!=0) {
//                	HAL_Delay(1000);
//                }

                    aix = ax;
 8005574:	4b0e      	ldr	r3, [pc, #56]	; (80055b0 <main+0x3b8>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a0e      	ldr	r2, [pc, #56]	; (80055b4 <main+0x3bc>)
 800557a:	6013      	str	r3, [r2, #0]
                    aiy = ay;
 800557c:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <main+0x3c0>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a0e      	ldr	r2, [pc, #56]	; (80055bc <main+0x3c4>)
 8005582:	6013      	str	r3, [r2, #0]
                    aiz = az;
 8005584:	4b0e      	ldr	r3, [pc, #56]	; (80055c0 <main+0x3c8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a0e      	ldr	r2, [pc, #56]	; (80055c4 <main+0x3cc>)
 800558a:	6013      	str	r3, [r2, #0]


                time+=1;
 800558c:	4b0e      	ldr	r3, [pc, #56]	; (80055c8 <main+0x3d0>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3301      	adds	r3, #1
 8005592:	4a0d      	ldr	r2, [pc, #52]	; (80055c8 <main+0x3d0>)
 8005594:	6013      	str	r3, [r2, #0]
          {
 8005596:	e65f      	b.n	8005258 <main+0x60>
 8005598:	20000200 	.word	0x20000200
 800559c:	08005c28 	.word	0x08005c28
 80055a0:	40020000 	.word	0x40020000
 80055a4:	2000031c 	.word	0x2000031c
 80055a8:	200002a4 	.word	0x200002a4
 80055ac:	20000394 	.word	0x20000394
 80055b0:	20000270 	.word	0x20000270
 80055b4:	20000288 	.word	0x20000288
 80055b8:	20000274 	.word	0x20000274
 80055bc:	2000028c 	.word	0x2000028c
 80055c0:	20000278 	.word	0x20000278
 80055c4:	20000290 	.word	0x20000290
 80055c8:	20000294 	.word	0x20000294

080055cc <SystemClock_Config>:
        /**
          * @brief System Clock Configuration
          * @retval None
          */
        void SystemClock_Config(void)
        {
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b094      	sub	sp, #80	; 0x50
 80055d0:	af00      	add	r7, sp, #0
          RCC_OscInitTypeDef RCC_OscInitStruct;
          RCC_ClkInitTypeDef RCC_ClkInitStruct;

            /**Configure the main internal regulator output voltage
            */
          __HAL_RCC_PWR_CLK_ENABLE();
 80055d2:	2300      	movs	r3, #0
 80055d4:	60bb      	str	r3, [r7, #8]
 80055d6:	4b35      	ldr	r3, [pc, #212]	; (80056ac <SystemClock_Config+0xe0>)
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	4a34      	ldr	r2, [pc, #208]	; (80056ac <SystemClock_Config+0xe0>)
 80055dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e0:	6413      	str	r3, [r2, #64]	; 0x40
 80055e2:	4b32      	ldr	r3, [pc, #200]	; (80056ac <SystemClock_Config+0xe0>)
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ea:	60bb      	str	r3, [r7, #8]
 80055ec:	68bb      	ldr	r3, [r7, #8]

          __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80055ee:	2300      	movs	r3, #0
 80055f0:	607b      	str	r3, [r7, #4]
 80055f2:	4b2f      	ldr	r3, [pc, #188]	; (80056b0 <SystemClock_Config+0xe4>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a2e      	ldr	r2, [pc, #184]	; (80056b0 <SystemClock_Config+0xe4>)
 80055f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	4b2c      	ldr	r3, [pc, #176]	; (80056b0 <SystemClock_Config+0xe4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005606:	607b      	str	r3, [r7, #4]
 8005608:	687b      	ldr	r3, [r7, #4]

            /**Initializes the CPU, AHB and APB busses clocks
            */
          RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800560a:	2302      	movs	r3, #2
 800560c:	623b      	str	r3, [r7, #32]
          RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800560e:	2301      	movs	r3, #1
 8005610:	62fb      	str	r3, [r7, #44]	; 0x2c
          RCC_OscInitStruct.HSICalibrationValue = 16;
 8005612:	2310      	movs	r3, #16
 8005614:	633b      	str	r3, [r7, #48]	; 0x30
          RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005616:	2302      	movs	r3, #2
 8005618:	63bb      	str	r3, [r7, #56]	; 0x38
          RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800561a:	2300      	movs	r3, #0
 800561c:	63fb      	str	r3, [r7, #60]	; 0x3c
          RCC_OscInitStruct.PLL.PLLM = 8;
 800561e:	2308      	movs	r3, #8
 8005620:	643b      	str	r3, [r7, #64]	; 0x40
          RCC_OscInitStruct.PLL.PLLN = 168;
 8005622:	23a8      	movs	r3, #168	; 0xa8
 8005624:	647b      	str	r3, [r7, #68]	; 0x44
          RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005626:	2302      	movs	r3, #2
 8005628:	64bb      	str	r3, [r7, #72]	; 0x48
          RCC_OscInitStruct.PLL.PLLQ = 4;
 800562a:	2304      	movs	r3, #4
 800562c:	64fb      	str	r3, [r7, #76]	; 0x4c
          if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800562e:	f107 0320 	add.w	r3, r7, #32
 8005632:	4618      	mov	r0, r3
 8005634:	f7fd fcf2 	bl	800301c <HAL_RCC_OscConfig>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d004      	beq.n	8005648 <SystemClock_Config+0x7c>
          {
            _Error_Handler(__FILE__, __LINE__);
 800563e:	f240 113d 	movw	r1, #317	; 0x13d
 8005642:	481c      	ldr	r0, [pc, #112]	; (80056b4 <SystemClock_Config+0xe8>)
 8005644:	f000 f8c4 	bl	80057d0 <_Error_Handler>
          }

            /**Initializes the CPU, AHB and APB busses clocks
            */
          RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005648:	230f      	movs	r3, #15
 800564a:	60fb      	str	r3, [r7, #12]
                                      |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
          RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800564c:	2302      	movs	r3, #2
 800564e:	613b      	str	r3, [r7, #16]
          RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005650:	2300      	movs	r3, #0
 8005652:	617b      	str	r3, [r7, #20]
          RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005654:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005658:	61bb      	str	r3, [r7, #24]
          RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800565a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800565e:	61fb      	str	r3, [r7, #28]

          if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005660:	f107 030c 	add.w	r3, r7, #12
 8005664:	2105      	movs	r1, #5
 8005666:	4618      	mov	r0, r3
 8005668:	f7fd ff48 	bl	80034fc <HAL_RCC_ClockConfig>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d004      	beq.n	800567c <SystemClock_Config+0xb0>
          {
            _Error_Handler(__FILE__, __LINE__);
 8005672:	f240 114b 	movw	r1, #331	; 0x14b
 8005676:	480f      	ldr	r0, [pc, #60]	; (80056b4 <SystemClock_Config+0xe8>)
 8005678:	f000 f8aa 	bl	80057d0 <_Error_Handler>
          }

            /**Configure the Systick interrupt time
            */
          HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800567c:	f7fe f8fc 	bl	8003878 <HAL_RCC_GetHCLKFreq>
 8005680:	4602      	mov	r2, r0
 8005682:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <SystemClock_Config+0xec>)
 8005684:	fba3 2302 	umull	r2, r3, r3, r2
 8005688:	099b      	lsrs	r3, r3, #6
 800568a:	4618      	mov	r0, r3
 800568c:	f7fb f89b 	bl	80007c6 <HAL_SYSTICK_Config>

            /**Configure the Systick
            */
          HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005690:	2004      	movs	r0, #4
 8005692:	f7fb f8a5 	bl	80007e0 <HAL_SYSTICK_CLKSourceConfig>

          /* SysTick_IRQn interrupt configuration */
          HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005696:	2200      	movs	r2, #0
 8005698:	2100      	movs	r1, #0
 800569a:	f04f 30ff 	mov.w	r0, #4294967295
 800569e:	f7fb f876 	bl	800078e <HAL_NVIC_SetPriority>
        }
 80056a2:	bf00      	nop
 80056a4:	3750      	adds	r7, #80	; 0x50
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40023800 	.word	0x40023800
 80056b0:	40007000 	.word	0x40007000
 80056b4:	08005c34 	.word	0x08005c34
 80056b8:	10624dd3 	.word	0x10624dd3

080056bc <MX_I2C1_Init>:

        /* I2C1 init function */
        static void MX_I2C1_Init(void)
        {
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0

          hi2c1.Instance = I2C1;
 80056c0:	4b14      	ldr	r3, [pc, #80]	; (8005714 <MX_I2C1_Init+0x58>)
 80056c2:	4a15      	ldr	r2, [pc, #84]	; (8005718 <MX_I2C1_Init+0x5c>)
 80056c4:	601a      	str	r2, [r3, #0]
          hi2c1.Init.ClockSpeed = 400000;
 80056c6:	4b13      	ldr	r3, [pc, #76]	; (8005714 <MX_I2C1_Init+0x58>)
 80056c8:	4a14      	ldr	r2, [pc, #80]	; (800571c <MX_I2C1_Init+0x60>)
 80056ca:	605a      	str	r2, [r3, #4]
          hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 80056cc:	4b11      	ldr	r3, [pc, #68]	; (8005714 <MX_I2C1_Init+0x58>)
 80056ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056d2:	609a      	str	r2, [r3, #8]
          hi2c1.Init.OwnAddress1 = 0;
 80056d4:	4b0f      	ldr	r3, [pc, #60]	; (8005714 <MX_I2C1_Init+0x58>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	60da      	str	r2, [r3, #12]
          hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80056da:	4b0e      	ldr	r3, [pc, #56]	; (8005714 <MX_I2C1_Init+0x58>)
 80056dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056e0:	611a      	str	r2, [r3, #16]
          hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80056e2:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <MX_I2C1_Init+0x58>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	615a      	str	r2, [r3, #20]
          hi2c1.Init.OwnAddress2 = 0;
 80056e8:	4b0a      	ldr	r3, [pc, #40]	; (8005714 <MX_I2C1_Init+0x58>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	619a      	str	r2, [r3, #24]
          hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80056ee:	4b09      	ldr	r3, [pc, #36]	; (8005714 <MX_I2C1_Init+0x58>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	61da      	str	r2, [r3, #28]
          hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80056f4:	4b07      	ldr	r3, [pc, #28]	; (8005714 <MX_I2C1_Init+0x58>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	621a      	str	r2, [r3, #32]
          if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80056fa:	4806      	ldr	r0, [pc, #24]	; (8005714 <MX_I2C1_Init+0x58>)
 80056fc:	f7fc fbcc 	bl	8001e98 <HAL_I2C_Init>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d004      	beq.n	8005710 <MX_I2C1_Init+0x54>
          {
            _Error_Handler(__FILE__, __LINE__);
 8005706:	f240 1169 	movw	r1, #361	; 0x169
 800570a:	4805      	ldr	r0, [pc, #20]	; (8005720 <MX_I2C1_Init+0x64>)
 800570c:	f000 f860 	bl	80057d0 <_Error_Handler>
          }

        }
 8005710:	bf00      	nop
 8005712:	bd80      	pop	{r7, pc}
 8005714:	200002ac 	.word	0x200002ac
 8005718:	40005400 	.word	0x40005400
 800571c:	00061a80 	.word	0x00061a80
 8005720:	08005c34 	.word	0x08005c34

08005724 <MX_USART2_UART_Init>:

        /* USART2 init function */
        static void MX_USART2_UART_Init(void)
        {
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0

          huart2.Instance = USART2;
 8005728:	4b12      	ldr	r3, [pc, #72]	; (8005774 <MX_USART2_UART_Init+0x50>)
 800572a:	4a13      	ldr	r2, [pc, #76]	; (8005778 <MX_USART2_UART_Init+0x54>)
 800572c:	601a      	str	r2, [r3, #0]
          huart2.Init.BaudRate = 115200;
 800572e:	4b11      	ldr	r3, [pc, #68]	; (8005774 <MX_USART2_UART_Init+0x50>)
 8005730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005734:	605a      	str	r2, [r3, #4]
          huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005736:	4b0f      	ldr	r3, [pc, #60]	; (8005774 <MX_USART2_UART_Init+0x50>)
 8005738:	2200      	movs	r2, #0
 800573a:	609a      	str	r2, [r3, #8]
          huart2.Init.StopBits = UART_STOPBITS_1;
 800573c:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <MX_USART2_UART_Init+0x50>)
 800573e:	2200      	movs	r2, #0
 8005740:	60da      	str	r2, [r3, #12]
          huart2.Init.Parity = UART_PARITY_NONE;
 8005742:	4b0c      	ldr	r3, [pc, #48]	; (8005774 <MX_USART2_UART_Init+0x50>)
 8005744:	2200      	movs	r2, #0
 8005746:	611a      	str	r2, [r3, #16]
          huart2.Init.Mode = UART_MODE_TX;
 8005748:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <MX_USART2_UART_Init+0x50>)
 800574a:	2208      	movs	r2, #8
 800574c:	615a      	str	r2, [r3, #20]
          huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800574e:	4b09      	ldr	r3, [pc, #36]	; (8005774 <MX_USART2_UART_Init+0x50>)
 8005750:	2200      	movs	r2, #0
 8005752:	619a      	str	r2, [r3, #24]
          huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005754:	4b07      	ldr	r3, [pc, #28]	; (8005774 <MX_USART2_UART_Init+0x50>)
 8005756:	2200      	movs	r2, #0
 8005758:	61da      	str	r2, [r3, #28]
          if (HAL_UART_Init(&huart2) != HAL_OK)
 800575a:	4806      	ldr	r0, [pc, #24]	; (8005774 <MX_USART2_UART_Init+0x50>)
 800575c:	f7fe f8c0 	bl	80038e0 <HAL_UART_Init>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d004      	beq.n	8005770 <MX_USART2_UART_Init+0x4c>
          {
            _Error_Handler(__FILE__, __LINE__);
 8005766:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800576a:	4804      	ldr	r0, [pc, #16]	; (800577c <MX_USART2_UART_Init+0x58>)
 800576c:	f000 f830 	bl	80057d0 <_Error_Handler>
          }

        }
 8005770:	bf00      	nop
 8005772:	bd80      	pop	{r7, pc}
 8005774:	20000394 	.word	0x20000394
 8005778:	40004400 	.word	0x40004400
 800577c:	08005c34 	.word	0x08005c34

08005780 <MX_GPIO_Init>:

        /** Pinout Configuration
        */
        static void MX_GPIO_Init(void)
        {
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0

          /* GPIO Ports Clock Enable */
          __HAL_RCC_GPIOA_CLK_ENABLE();
 8005786:	2300      	movs	r3, #0
 8005788:	607b      	str	r3, [r7, #4]
 800578a:	4b10      	ldr	r3, [pc, #64]	; (80057cc <MX_GPIO_Init+0x4c>)
 800578c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578e:	4a0f      	ldr	r2, [pc, #60]	; (80057cc <MX_GPIO_Init+0x4c>)
 8005790:	f043 0301 	orr.w	r3, r3, #1
 8005794:	6313      	str	r3, [r2, #48]	; 0x30
 8005796:	4b0d      	ldr	r3, [pc, #52]	; (80057cc <MX_GPIO_Init+0x4c>)
 8005798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	607b      	str	r3, [r7, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
          __HAL_RCC_GPIOB_CLK_ENABLE();
 80057a2:	2300      	movs	r3, #0
 80057a4:	603b      	str	r3, [r7, #0]
 80057a6:	4b09      	ldr	r3, [pc, #36]	; (80057cc <MX_GPIO_Init+0x4c>)
 80057a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057aa:	4a08      	ldr	r2, [pc, #32]	; (80057cc <MX_GPIO_Init+0x4c>)
 80057ac:	f043 0302 	orr.w	r3, r3, #2
 80057b0:	6313      	str	r3, [r2, #48]	; 0x30
 80057b2:	4b06      	ldr	r3, [pc, #24]	; (80057cc <MX_GPIO_Init+0x4c>)
 80057b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	683b      	ldr	r3, [r7, #0]

        }
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40023800 	.word	0x40023800

080057d0 <_Error_Handler>:
          * @param  file: The file name as string.
          * @param  line: The line in file as a number.
          * @retval None
          */
        void _Error_Handler(char *file, int line)
        {
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
          /* USER CODE BEGIN Error_Handler_Debug */
          /* User can add his own implementation to report the HAL error return state */
          while(1)
 80057da:	e7fe      	b.n	80057da <_Error_Handler+0xa>

080057dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057e2:	2300      	movs	r3, #0
 80057e4:	607b      	str	r3, [r7, #4]
 80057e6:	4b10      	ldr	r3, [pc, #64]	; (8005828 <HAL_MspInit+0x4c>)
 80057e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ea:	4a0f      	ldr	r2, [pc, #60]	; (8005828 <HAL_MspInit+0x4c>)
 80057ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057f0:	6453      	str	r3, [r2, #68]	; 0x44
 80057f2:	4b0d      	ldr	r3, [pc, #52]	; (8005828 <HAL_MspInit+0x4c>)
 80057f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057fa:	607b      	str	r3, [r7, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057fe:	2300      	movs	r3, #0
 8005800:	603b      	str	r3, [r7, #0]
 8005802:	4b09      	ldr	r3, [pc, #36]	; (8005828 <HAL_MspInit+0x4c>)
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	4a08      	ldr	r2, [pc, #32]	; (8005828 <HAL_MspInit+0x4c>)
 8005808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800580c:	6413      	str	r3, [r2, #64]	; 0x40
 800580e:	4b06      	ldr	r3, [pc, #24]	; (8005828 <HAL_MspInit+0x4c>)
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005816:	603b      	str	r3, [r7, #0]
 8005818:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800581a:	2007      	movs	r0, #7
 800581c:	f7fa ffac 	bl	8000778 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005820:	bf00      	nop
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40023800 	.word	0x40023800

0800582c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08a      	sub	sp, #40	; 0x28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005834:	f107 0314 	add.w	r3, r7, #20
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	605a      	str	r2, [r3, #4]
 800583e:	609a      	str	r2, [r3, #8]
 8005840:	60da      	str	r2, [r3, #12]
 8005842:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a19      	ldr	r2, [pc, #100]	; (80058b0 <HAL_I2C_MspInit+0x84>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d12b      	bne.n	80058a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800584e:	2300      	movs	r3, #0
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	4b18      	ldr	r3, [pc, #96]	; (80058b4 <HAL_I2C_MspInit+0x88>)
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	4a17      	ldr	r2, [pc, #92]	; (80058b4 <HAL_I2C_MspInit+0x88>)
 8005858:	f043 0302 	orr.w	r3, r3, #2
 800585c:	6313      	str	r3, [r2, #48]	; 0x30
 800585e:	4b15      	ldr	r3, [pc, #84]	; (80058b4 <HAL_I2C_MspInit+0x88>)
 8005860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	613b      	str	r3, [r7, #16]
 8005868:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800586a:	23c0      	movs	r3, #192	; 0xc0
 800586c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800586e:	2312      	movs	r3, #18
 8005870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005872:	2301      	movs	r3, #1
 8005874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005876:	2300      	movs	r3, #0
 8005878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800587a:	2304      	movs	r3, #4
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800587e:	f107 0314 	add.w	r3, r7, #20
 8005882:	4619      	mov	r1, r3
 8005884:	480c      	ldr	r0, [pc, #48]	; (80058b8 <HAL_I2C_MspInit+0x8c>)
 8005886:	f7fa ffc7 	bl	8000818 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
 800588e:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <HAL_I2C_MspInit+0x88>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	4a08      	ldr	r2, [pc, #32]	; (80058b4 <HAL_I2C_MspInit+0x88>)
 8005894:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005898:	6413      	str	r3, [r2, #64]	; 0x40
 800589a:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <HAL_I2C_MspInit+0x88>)
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80058a6:	bf00      	nop
 80058a8:	3728      	adds	r7, #40	; 0x28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40005400 	.word	0x40005400
 80058b4:	40023800 	.word	0x40023800
 80058b8:	40020400 	.word	0x40020400

080058bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08a      	sub	sp, #40	; 0x28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058c4:	f107 0314 	add.w	r3, r7, #20
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	605a      	str	r2, [r3, #4]
 80058ce:	609a      	str	r2, [r3, #8]
 80058d0:	60da      	str	r2, [r3, #12]
 80058d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a19      	ldr	r2, [pc, #100]	; (8005940 <HAL_UART_MspInit+0x84>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d12b      	bne.n	8005936 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80058de:	2300      	movs	r3, #0
 80058e0:	613b      	str	r3, [r7, #16]
 80058e2:	4b18      	ldr	r3, [pc, #96]	; (8005944 <HAL_UART_MspInit+0x88>)
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	4a17      	ldr	r2, [pc, #92]	; (8005944 <HAL_UART_MspInit+0x88>)
 80058e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ec:	6413      	str	r3, [r2, #64]	; 0x40
 80058ee:	4b15      	ldr	r3, [pc, #84]	; (8005944 <HAL_UART_MspInit+0x88>)
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f6:	613b      	str	r3, [r7, #16]
 80058f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058fa:	2300      	movs	r3, #0
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	4b11      	ldr	r3, [pc, #68]	; (8005944 <HAL_UART_MspInit+0x88>)
 8005900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005902:	4a10      	ldr	r2, [pc, #64]	; (8005944 <HAL_UART_MspInit+0x88>)
 8005904:	f043 0301 	orr.w	r3, r3, #1
 8005908:	6313      	str	r3, [r2, #48]	; 0x30
 800590a:	4b0e      	ldr	r3, [pc, #56]	; (8005944 <HAL_UART_MspInit+0x88>)
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005916:	230c      	movs	r3, #12
 8005918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800591a:	2302      	movs	r3, #2
 800591c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800591e:	2301      	movs	r3, #1
 8005920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005922:	2303      	movs	r3, #3
 8005924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005926:	2307      	movs	r3, #7
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800592a:	f107 0314 	add.w	r3, r7, #20
 800592e:	4619      	mov	r1, r3
 8005930:	4805      	ldr	r0, [pc, #20]	; (8005948 <HAL_UART_MspInit+0x8c>)
 8005932:	f7fa ff71 	bl	8000818 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005936:	bf00      	nop
 8005938:	3728      	adds	r7, #40	; 0x28
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	40004400 	.word	0x40004400
 8005944:	40023800 	.word	0x40023800
 8005948:	40020000 	.word	0x40020000

0800594c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005950:	bf00      	nop
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800595a:	b480      	push	{r7}
 800595c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800595e:	e7fe      	b.n	800595e <HardFault_Handler+0x4>

08005960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005964:	e7fe      	b.n	8005964 <MemManage_Handler+0x4>

08005966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005966:	b480      	push	{r7}
 8005968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800596a:	e7fe      	b.n	800596a <BusFault_Handler+0x4>

0800596c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005970:	e7fe      	b.n	8005970 <UsageFault_Handler+0x4>

08005972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005972:	b480      	push	{r7}
 8005974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005976:	bf00      	nop
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005984:	bf00      	nop
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800598e:	b480      	push	{r7}
 8005990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005992:	bf00      	nop
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059a0:	f7fa fdf6 	bl	8000590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80059a4:	bf00      	nop
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80059ac:	4802      	ldr	r0, [pc, #8]	; (80059b8 <OTG_FS_IRQHandler+0x10>)
 80059ae:	f7fb f8e5 	bl	8000b7c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80059b2:	bf00      	nop
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	200003d4 	.word	0x200003d4

080059bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80059c0:	4b08      	ldr	r3, [pc, #32]	; (80059e4 <SystemInit+0x28>)
 80059c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c6:	4a07      	ldr	r2, [pc, #28]	; (80059e4 <SystemInit+0x28>)
 80059c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80059d0:	4b04      	ldr	r3, [pc, #16]	; (80059e4 <SystemInit+0x28>)
 80059d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059d6:	609a      	str	r2, [r3, #8]
#endif
}
 80059d8:	bf00      	nop
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	e000ed00 	.word	0xe000ed00

080059e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff fb48 	bl	800508c <USBH_LL_IncTimer>
}
 80059fc:	bf00      	nop
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff fb80 	bl	8005118 <USBH_LL_Connect>
}
 8005a18:	bf00      	nop
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7ff fb98 	bl	8005164 <USBH_LL_Disconnect>
}
 8005a34:	bf00      	nop
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	70fb      	strb	r3, [r7, #3]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff fb3a 	bl	80050e0 <USBH_LL_PortEnabled>
} 
 8005a6c:	bf00      	nop
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff fb3a 	bl	80050fc <USBH_LL_PortDisabled>
} 
 8005a88:	bf00      	nop
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fb f96e 	bl	8000d88 <HAL_HCD_Start>
 8005aac:	4603      	mov	r3, r0
 8005aae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 f822 	bl	8005afc <USBH_Get_USB_Status>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fb f976 	bl	8000dce <HAL_HCD_Stop>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 f807 	bl	8005afc <USBH_Get_USB_Status>
 8005aee:	4603      	mov	r3, r0
 8005af0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8005af2:	7bbb      	ldrb	r3, [r7, #14]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	2b03      	cmp	r3, #3
 8005b0e:	d817      	bhi.n	8005b40 <USBH_Get_USB_Status+0x44>
 8005b10:	a201      	add	r2, pc, #4	; (adr r2, 8005b18 <USBH_Get_USB_Status+0x1c>)
 8005b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b16:	bf00      	nop
 8005b18:	08005b29 	.word	0x08005b29
 8005b1c:	08005b2f 	.word	0x08005b2f
 8005b20:	08005b35 	.word	0x08005b35
 8005b24:	08005b3b 	.word	0x08005b3b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8005b2c:	e00b      	b.n	8005b46 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8005b2e:	2302      	movs	r3, #2
 8005b30:	73fb      	strb	r3, [r7, #15]
    break;
 8005b32:	e008      	b.n	8005b46 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8005b34:	2301      	movs	r3, #1
 8005b36:	73fb      	strb	r3, [r7, #15]
    break;
 8005b38:	e005      	b.n	8005b46 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	73fb      	strb	r3, [r7, #15]
    break;
 8005b3e:	e002      	b.n	8005b46 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8005b40:	2302      	movs	r3, #2
 8005b42:	73fb      	strb	r3, [r7, #15]
    break;
 8005b44:	bf00      	nop
  }
  return usb_status;
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005b58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005b5a:	e003      	b.n	8005b64 <LoopCopyDataInit>

08005b5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005b5c:	4b0c      	ldr	r3, [pc, #48]	; (8005b90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005b5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005b60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005b62:	3104      	adds	r1, #4

08005b64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005b64:	480b      	ldr	r0, [pc, #44]	; (8005b94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005b66:	4b0c      	ldr	r3, [pc, #48]	; (8005b98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005b68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005b6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005b6c:	d3f6      	bcc.n	8005b5c <CopyDataInit>
  ldr  r2, =_sbss
 8005b6e:	4a0b      	ldr	r2, [pc, #44]	; (8005b9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005b70:	e002      	b.n	8005b78 <LoopFillZerobss>

08005b72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005b72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005b74:	f842 3b04 	str.w	r3, [r2], #4

08005b78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005b78:	4b09      	ldr	r3, [pc, #36]	; (8005ba0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005b7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005b7c:	d3f9      	bcc.n	8005b72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005b7e:	f7ff ff1d 	bl	80059bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b82:	f000 f811 	bl	8005ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b86:	f7ff fb37 	bl	80051f8 <main>
  bx  lr    
 8005b8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005b8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005b90:	08005c6c 	.word	0x08005c6c
  ldr  r0, =_sdata
 8005b94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005b98:	20000238 	.word	0x20000238
  ldr  r2, =_sbss
 8005b9c:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 8005ba0:	20000698 	.word	0x20000698

08005ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ba4:	e7fe      	b.n	8005ba4 <ADC_IRQHandler>
	...

08005ba8 <__libc_init_array>:
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	4e0d      	ldr	r6, [pc, #52]	; (8005be0 <__libc_init_array+0x38>)
 8005bac:	4c0d      	ldr	r4, [pc, #52]	; (8005be4 <__libc_init_array+0x3c>)
 8005bae:	1ba4      	subs	r4, r4, r6
 8005bb0:	10a4      	asrs	r4, r4, #2
 8005bb2:	2500      	movs	r5, #0
 8005bb4:	42a5      	cmp	r5, r4
 8005bb6:	d109      	bne.n	8005bcc <__libc_init_array+0x24>
 8005bb8:	4e0b      	ldr	r6, [pc, #44]	; (8005be8 <__libc_init_array+0x40>)
 8005bba:	4c0c      	ldr	r4, [pc, #48]	; (8005bec <__libc_init_array+0x44>)
 8005bbc:	f000 f820 	bl	8005c00 <_init>
 8005bc0:	1ba4      	subs	r4, r4, r6
 8005bc2:	10a4      	asrs	r4, r4, #2
 8005bc4:	2500      	movs	r5, #0
 8005bc6:	42a5      	cmp	r5, r4
 8005bc8:	d105      	bne.n	8005bd6 <__libc_init_array+0x2e>
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
 8005bcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bd0:	4798      	blx	r3
 8005bd2:	3501      	adds	r5, #1
 8005bd4:	e7ee      	b.n	8005bb4 <__libc_init_array+0xc>
 8005bd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bda:	4798      	blx	r3
 8005bdc:	3501      	adds	r5, #1
 8005bde:	e7f2      	b.n	8005bc6 <__libc_init_array+0x1e>
 8005be0:	08005c64 	.word	0x08005c64
 8005be4:	08005c64 	.word	0x08005c64
 8005be8:	08005c64 	.word	0x08005c64
 8005bec:	08005c68 	.word	0x08005c68

08005bf0 <strcpy>:
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bf6:	f803 2b01 	strb.w	r2, [r3], #1
 8005bfa:	2a00      	cmp	r2, #0
 8005bfc:	d1f9      	bne.n	8005bf2 <strcpy+0x2>
 8005bfe:	4770      	bx	lr

08005c00 <_init>:
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	bf00      	nop
 8005c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c06:	bc08      	pop	{r3}
 8005c08:	469e      	mov	lr, r3
 8005c0a:	4770      	bx	lr

08005c0c <_fini>:
 8005c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0e:	bf00      	nop
 8005c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c12:	bc08      	pop	{r3}
 8005c14:	469e      	mov	lr, r3
 8005c16:	4770      	bx	lr
